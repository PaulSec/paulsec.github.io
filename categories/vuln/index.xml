<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Vuln on </title>
    <link>http://paulsec.github.io/categories/vuln/</link>
    <description>Recent content in Vuln on </description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 03 Jul 2014 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://paulsec.github.io/categories/vuln/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Experiments with UPnP</title>
      <link>http://paulsec.github.io/posts/experiments-with-upnp/</link>
      <pubDate>Thu, 03 Jul 2014 00:00:00 +0000</pubDate>
      <guid>http://paulsec.github.io/posts/experiments-with-upnp/</guid>
      <description>&lt;p&gt;This post deals with recent observations regarding UPnP (&lt;em&gt;Universal Plug and Play&lt;/em&gt;) protocol &amp;amp; Routers.&#xA;In few words, thanks to this protocol, devices (such as file sharing services, games, ..) can be easily connected/deployed.&lt;/p&gt;&#xA;&lt;p&gt;First, I started to do research on my box to find relevant UPnP functionalities by hand, found some but I had trouble to exploit them.&#xA;Few days ago, David Middlehurst released a tool called &lt;a href=&#34;https://github.com/nccgroup/UPnP-Pentest-Toolkit&#34;&gt;&amp;ldquo;UPnP Pentest Toolkit&amp;rdquo;&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Diving into XSS googles game</title>
      <link>http://paulsec.github.io/posts/diving-into-xss-googles-game/</link>
      <pubDate>Mon, 02 Jun 2014 00:00:00 +0000</pubDate>
      <guid>http://paulsec.github.io/posts/diving-into-xss-googles-game/</guid>
      <description>&lt;p&gt;Hi there, this post deals with the game released by Google few days ago about XSS vulnerabilities that you can find &lt;a href=&#34;https://xss-game.appspot.com/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;p&gt;I&amp;rsquo;ll enumerate some of the solution I found on the Internet which were (in my opnion) interesting/fun.&#xA;This post contains the solutions for all levels. &lt;strong&gt;Big spoil.&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;level-1-hello-world-of-xss&#34;&gt;Level 1: Hello, world of XSS&lt;/h2&gt;&#xA;&lt;p&gt;Well, this one was obvious:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;script&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;alert&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;);&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;/script&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;level-2-persistence-is-key&#34;&gt;Level 2: Persistence is key&lt;/h2&gt;&#xA;&lt;p&gt;For this one, you had different options:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Blind HQL Injection in REST API using H2 DMBS</title>
      <link>http://paulsec.github.io/posts/blind-hql-injection-in-rest-api-using-h2-dbms/</link>
      <pubDate>Mon, 05 May 2014 00:00:00 +0000</pubDate>
      <guid>http://paulsec.github.io/posts/blind-hql-injection-in-rest-api-using-h2-dbms/</guid>
      <description>&lt;p&gt;This post deals with some research I just did regarding (Blind) HQL injections with H2 as the DataBase Management System.&lt;/p&gt;&#xA;&lt;p&gt;First, you should read this post which gives some really useful information regarding HQL injections in general: &lt;a href=&#34;http://blog.h3xstream.com/2014/02/hql-for-pentesters.html&#34;&gt;HQL for pentesters&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;p&gt;During the assessment, I checked the API calls by using Burp as a proxy and one call was:&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;http://application/API/Users/?req=id=1&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The output was a JSON response, such as:&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;[{user: &amp;#34;admin&amp;#34;, id: &amp;#34;1&amp;#34;, firstName:&amp;#34;Admin&amp;#34;}]&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;If you changed the id with the numeric value &lt;strong&gt;2&lt;/strong&gt;, and so on.. it was working.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
