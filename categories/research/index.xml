<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Research on </title>
    <link>http://paulsec.github.io/categories/research/</link>
    <description>Recent content in Research on </description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 22 May 2020 15:29:02 +0200</lastBuildDate>
    <atom:link href="http://paulsec.github.io/categories/research/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Android Instrumentation with Smali: A survival guide</title>
      <link>http://paulsec.github.io/posts/android-smali-primer/</link>
      <pubDate>Fri, 22 May 2020 15:29:02 +0200</pubDate>
      <guid>http://paulsec.github.io/posts/android-smali-primer/</guid>
      <description>&lt;p&gt;Hi everyone!&lt;/p&gt;&#xA;&lt;p&gt;This article aims at providing you survival steps while tinkering around with Smali &amp;amp; Android applications.&#xA;The name of the original application I did my search on will remain secret but I created a dummy application doing the same so that you can do it on your own.&#xA;The link of the &lt;a href=&#34;https://gist.github.com/PaulSec/6beab513af069646a5355f66f2bb2329&#34;&gt;MainActivity.java&lt;/a&gt; and &lt;a href=&#34;https://gist.github.com/PaulSec/6beab513af069646a5355f66f2bb2329&#34;&gt;MainActivity.smali&lt;/a&gt; is &lt;a href=&#34;https://gist.github.com/PaulSec/6beab513af069646a5355f66f2bb2329&#34;&gt;here&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;Create a dummy application with Android Studio and just import this. &lt;code&gt;PLACEHOLDER_*&lt;/code&gt; strings will have to be replaced with proper ones if you want to try.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Running SSLScan on 5k servers taken from Alexa&#39;s top 10k</title>
      <link>http://paulsec.github.io/posts/running-sslscan-on-5k-servers-taken-from-alexas-top-10k/</link>
      <pubDate>Sun, 07 Jun 2015 00:00:00 +0000</pubDate>
      <guid>http://paulsec.github.io/posts/running-sslscan-on-5k-servers-taken-from-alexas-top-10k/</guid>
      <description>&lt;!-- raw HTML omitted --&gt;&#xA;&lt;!-- raw HTML omitted --&gt;&#xA;&lt;!-- raw HTML omitted --&gt;&#xA;&lt;p&gt;After analyzing the &lt;a href=&#34;https://paulsec.github.io/blog/2014/05/13/http-security-headers-on-top-10k-alexa-websites/&#34;&gt;HTTP Security Headers from the top 10k Alexa websites&lt;/a&gt;, I decided looking at the SSL Ciphers used on those websites.&lt;/p&gt;&#xA;&lt;p&gt;These results are coming from a scan on port 443 for all those domains.&#xA;Only &lt;strong&gt;4715&lt;/strong&gt; servers replied.&lt;/p&gt;&#xA;&lt;p&gt;The OpenSSL version installed on my server did not support SSLv2 so SSLv2 ciphers have not been detected.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Experiments with UPnP</title>
      <link>http://paulsec.github.io/posts/experiments-with-upnp/</link>
      <pubDate>Thu, 03 Jul 2014 00:00:00 +0000</pubDate>
      <guid>http://paulsec.github.io/posts/experiments-with-upnp/</guid>
      <description>&lt;p&gt;This post deals with recent observations regarding UPnP (&lt;em&gt;Universal Plug and Play&lt;/em&gt;) protocol &amp;amp; Routers.&#xA;In few words, thanks to this protocol, devices (such as file sharing services, games, ..) can be easily connected/deployed.&lt;/p&gt;&#xA;&lt;p&gt;First, I started to do research on my box to find relevant UPnP functionalities by hand, found some but I had trouble to exploit them.&#xA;Few days ago, David Middlehurst released a tool called &lt;a href=&#34;https://github.com/nccgroup/UPnP-Pentest-Toolkit&#34;&gt;&amp;ldquo;UPnP Pentest Toolkit&amp;rdquo;&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>HTTP Security Headers on top 10k Alexa websites</title>
      <link>http://paulsec.github.io/posts/http-security-headers-on-top-10k-alexa-websites/</link>
      <pubDate>Tue, 13 May 2014 00:00:00 +0000</pubDate>
      <guid>http://paulsec.github.io/posts/http-security-headers-on-top-10k-alexa-websites/</guid>
      <description>&lt;!-- raw HTML omitted --&gt;&#xA;&lt;!-- raw HTML omitted --&gt;&#xA;&lt;!-- raw HTML omitted --&gt;&#xA;&lt;p&gt;&lt;strong&gt;EDIT&lt;/strong&gt;: Added statistics of &lt;em&gt;max-age&lt;/em&gt; option.&lt;/p&gt;&#xA;&lt;p&gt;Hi there,&lt;/p&gt;&#xA;&lt;p&gt;This blog post deals with HTTP Security Headers on top 10k Alexa websites.&#xA;Based on &lt;a href=&#34;https://www.reddit.com/r/netsec/comments/254om6/how_common_are_http_security_headers_really_lzone/&#34;&gt;this&lt;/a&gt;  discussion on &lt;a href=&#34;https://www.reddit.com/r/netsec/&#34;&gt;netsec&lt;/a&gt;, I decided to do some statistics on Alexa ranking.&lt;/p&gt;&#xA;&lt;p&gt;To do this study, I did a GET HTTP Request and saved the headers in the HTTP response. This has been done using Python.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Blind HQL Injection in REST API using H2 DMBS</title>
      <link>http://paulsec.github.io/posts/blind-hql-injection-in-rest-api-using-h2-dbms/</link>
      <pubDate>Mon, 05 May 2014 00:00:00 +0000</pubDate>
      <guid>http://paulsec.github.io/posts/blind-hql-injection-in-rest-api-using-h2-dbms/</guid>
      <description>&lt;p&gt;This post deals with some research I just did regarding (Blind) HQL injections with H2 as the DataBase Management System.&lt;/p&gt;&#xA;&lt;p&gt;First, you should read this post which gives some really useful information regarding HQL injections in general: &lt;a href=&#34;http://blog.h3xstream.com/2014/02/hql-for-pentesters.html&#34;&gt;HQL for pentesters&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;p&gt;During the assessment, I checked the API calls by using Burp as a proxy and one call was:&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;http://application/API/Users/?req=id=1&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The output was a JSON response, such as:&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;[{user: &amp;#34;admin&amp;#34;, id: &amp;#34;1&amp;#34;, firstName:&amp;#34;Admin&amp;#34;}]&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;If you changed the id with the numeric value &lt;strong&gt;2&lt;/strong&gt;, and so on.. it was working.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Python &#43; Transmission daemon = Download easily your favorite TV Show</title>
      <link>http://paulsec.github.io/posts/python-plus-transmission-daemon-equals-download-easily-your-favorite-tv-show/</link>
      <pubDate>Fri, 28 Mar 2014 00:00:00 +0000</pubDate>
      <guid>http://paulsec.github.io/posts/python-plus-transmission-daemon-equals-download-easily-your-favorite-tv-show/</guid>
      <description>&lt;p&gt;This post is about my last project : my &lt;em&gt;TV Show Manager&lt;/em&gt;.&lt;/p&gt;&#xA;&lt;p&gt;I decided to start it because I wanted something &lt;strong&gt;really&lt;/strong&gt; simple to download my favorite TV Shows.&#xA;In this post, I&amp;rsquo;ll explain step by step how to reproduce it at home.&lt;/p&gt;&#xA;&lt;p&gt;Basically, with this tutorial you&amp;rsquo;ll set up your &lt;strong&gt;Raspberry&lt;/strong&gt; box by :&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Installing / set-uping transmission-daemon&lt;/li&gt;&#xA;&lt;li&gt;Getting one of my latest project &lt;a href=&#34;https://github.com/PaulSec/TVShowsManager&#34;&gt;TVShowManager&lt;/a&gt; that uses my &lt;a href=&#34;https://github.com/PaulSec/eztv_api&#34;&gt;EZTV Python API&lt;/a&gt;.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;Well.. let&amp;rsquo;s start ?&lt;/p&gt;</description>
    </item>
    <item>
      <title>XSS Callback</title>
      <link>http://paulsec.github.io/posts/xss-callback/</link>
      <pubDate>Thu, 20 Mar 2014 00:00:00 +0000</pubDate>
      <guid>http://paulsec.github.io/posts/xss-callback/</guid>
      <description>&lt;p&gt;This post deals with a project I developed : &lt;a href=&#34;https://github.com/PaulSec/XSS-Callback/&#34;&gt;XSS Callback&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;p&gt;This is not going to be (at least, I hope) a boring post about XSS exploitation. No.&lt;/p&gt;&#xA;&lt;p&gt;Well, one scenario of using XSS would be to steal victim&amp;rsquo;s cookie and access the page through his session.&#xA;This technique is called &lt;strong&gt;Session Hijacking&lt;/strong&gt;. Ok fair enough.&lt;/p&gt;&#xA;&lt;p&gt;However, some issues are present using this technique, let&amp;rsquo;s take an example :&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;You target a website&lt;/li&gt;&#xA;&lt;li&gt;Unfortunately, it&amp;rsquo;s too late (or too early depending on your situation) and you go to sleep.&lt;/li&gt;&#xA;&lt;li&gt;You wake up in the night and there are loads of victims&amp;rsquo;s sessions. Great !&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;The only problem : the user &lt;em&gt;might have logged out of the platform&lt;/em&gt; &lt;strong&gt;or&lt;/strong&gt; there might be a &lt;em&gt;timeout on the session&lt;/em&gt;.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
