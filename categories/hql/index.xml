<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>hql on </title>
    <link>http://paulsec.github.io/categories/hql/</link>
    <description>Recent content in hql on </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 05 May 2014 00:00:00 +0000</lastBuildDate><atom:link href="http://paulsec.github.io/categories/hql/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Blind HQL Injection in REST API using H2 DMBS</title>
      <link>http://paulsec.github.io/posts/blind-hql-injection-in-rest-api-using-h2-dbms/</link>
      <pubDate>Mon, 05 May 2014 00:00:00 +0000</pubDate>
      
      <guid>http://paulsec.github.io/posts/blind-hql-injection-in-rest-api-using-h2-dbms/</guid>
      <description>This post deals with some research I just did regarding (Blind) HQL injections with H2 as the DataBase Management System.
First, you should read this post which gives some really useful information regarding HQL injections in general: HQL for pentesters.
During the assessment, I checked the API calls by using Burp as a proxy and one call was:
http://application/API/Users/?req=id=1 The output was a JSON response, such as:
[{user: &amp;#34;admin&amp;#34;, id: &amp;#34;1&amp;#34;, firstName:&amp;#34;Admin&amp;#34;}] If you changed the id with the numeric value 2, and so on.</description>
    </item>
    
  </channel>
</rss>
