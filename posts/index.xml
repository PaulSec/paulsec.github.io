<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on </title>
    <link>http://paulsec.github.io/posts/</link>
    <description>Recent content in Posts on </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 23 Jan 2020 14:02:07 +0100</lastBuildDate>
    
	<atom:link href="http://paulsec.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Deploy a Django application through Github Actions</title>
      <link>http://paulsec.github.io/posts/deploy-django-github-actions/</link>
      <pubDate>Thu, 23 Jan 2020 14:02:07 +0100</pubDate>
      
      <guid>http://paulsec.github.io/posts/deploy-django-github-actions/</guid>
      <description>Hi everyone,
Here is a small article on how I successfully deployed my Django application through Github actions. Basically, what I needed was pretty simple, as soon as I push a new commit (on master), I want to:
 connect through SSH on my remote server restart my cfptime service (which will do all the magic)  My cfptime.org project is something like ~3 years old and at the beginning, I was deploying by hand and I created a bash script in order to ease this part and this is what it looked like:</description>
    </item>
    
    <item>
      <title>Throttling policies on specific Django Viewset</title>
      <link>http://paulsec.github.io/posts/django-viewset-throttling/</link>
      <pubDate>Tue, 14 Jan 2020 21:14:36 +0100</pubDate>
      
      <guid>http://paulsec.github.io/posts/django-viewset-throttling/</guid>
      <description>Hi everyone!
Here is a small article on some experiments I came across with the development of the new cfptime.org version. Goal: I needed to limit (anonymous) visitors on specific API endpoints (especially when creating/posting new Call For Papers to avoid flooding).
It turns out someone had similar thoughts and his blog post was pretty interested and helped me a lot. You can find the blog post here: https://www.pedaldrivenprogramming.com/2017/05/throttling-django-rest-framwork-viewsets/.
As the author states:</description>
    </item>
    
    <item>
      <title>Angular 8 Deployment within Github Actions Pipeline</title>
      <link>http://paulsec.github.io/posts/angular8-deployment-pipeline-github-actions/</link>
      <pubDate>Thu, 02 Jan 2020 22:09:28 +0100</pubDate>
      
      <guid>http://paulsec.github.io/posts/angular8-deployment-pipeline-github-actions/</guid>
      <description>Hello everyone,
Here is a small article in order to explain you how I&#39;ve deployed my Angular front-end to a server with Github actions.
Context: You might know that I am the developer behind cfptime.org and I&#39;ve had the chance during the holidays to start re-developing the front-end using Angular. If you want to check what it looks like: https://beta.cfptime.org.
I&#39;ve longer been a CircleCI user but it seems that the free plan is not enough in order to build my Angular project (and trust me, it&#39;s nothing ground-breaking, just couple of API calls and that&#39;s it).</description>
    </item>
    
    <item>
      <title>Corelan Bootcamp Review</title>
      <link>http://paulsec.github.io/posts/corelan-bootcamp-review-2018/</link>
      <pubDate>Sat, 28 Dec 2019 15:58:01 +0100</pubDate>
      
      <guid>http://paulsec.github.io/posts/corelan-bootcamp-review-2018/</guid>
      <description>Time to relieve this blog and I think that a review of the Corelan Bootcamp training is the perfect occasion! I had in mind to try the OSCE certification and I felt I needed to go beyond just basic buffer overflows that you might come by with OSCP for example.
I&#39;ve had the chance to attend this training at Hack in Paris in June 2018 and I will try to give as much insights as I can without telling too much (because of NDA).</description>
    </item>
    
    <item>
      <title>BSidesCBR 2017 CTF Write-Up: Derpchat</title>
      <link>http://paulsec.github.io/posts/bsidescbr-2017-ctf-write-up-derpchat/</link>
      <pubDate>Sun, 07 May 2017 00:00:00 +0000</pubDate>
      
      <guid>http://paulsec.github.io/posts/bsidescbr-2017-ctf-write-up-derpchat/</guid>
      <description>Hey there,
Following my serie of write-ups for the BSidesCBR challs, I will discuss the DerpChat one.
The instructions for this challenge were:
This web-based challenge was worth 275 points. Run docker-compose up and then browse to https://web.shell.dance:4443/. After browsing to https://web.shell.dance:4443/, I arrived on a registration/login page. I registered the account test/test and I finally got a page with two inputs: – One too search some messages I suppose – And one in the middle of the page stating: “Hello, could you please send me the link I was after?</description>
    </item>
    
    <item>
      <title>BSidesCBR 2017 CTF Write-Up: Needleinahaystack</title>
      <link>http://paulsec.github.io/posts/bsidescbr-2017-ctf-write-up-needleinahaystack/</link>
      <pubDate>Sat, 06 May 2017 00:00:00 +0000</pubDate>
      
      <guid>http://paulsec.github.io/posts/bsidescbr-2017-ctf-write-up-needleinahaystack/</guid>
      <description>Hello everyone!
Such a long time since I didn’t post any article. Here is a quick write-up for the BSidesCBR Cryto challenge for “needleinahaystack”.
Before diving in the challenge, huge props to all the organizers and OJ for making those challs available to everyone with Docker containers and stuff (more write-ups coming soon).
If you guys want to give it a shot, here you go, all challs are available here. The challenge we will discuss in this post (needleinahaystack) is located here.</description>
    </item>
    
    <item>
      <title>Running SSLScan on 5k servers taken from Alexa&#39;s top 10k</title>
      <link>http://paulsec.github.io/posts/running-sslscan-on-5k-servers-taken-from-alexas-top-10k/</link>
      <pubDate>Sun, 07 Jun 2015 00:00:00 +0000</pubDate>
      
      <guid>http://paulsec.github.io/posts/running-sslscan-on-5k-servers-taken-from-alexas-top-10k/</guid>
      <description>After analyzing the HTTP Security Headers from the top 10k Alexa websites, I decided looking at the SSL Ciphers used on those websites.
These results are coming from a scan on port 443 for all those domains. Only 4715 servers replied.
The OpenSSL version installed on my server did not support SSLv2 so SSLv2 ciphers have not been detected.
Here are the results:</description>
    </item>
    
    <item>
      <title>Experiments with UPnP</title>
      <link>http://paulsec.github.io/posts/experiments-with-upnp/</link>
      <pubDate>Thu, 03 Jul 2014 00:00:00 +0000</pubDate>
      
      <guid>http://paulsec.github.io/posts/experiments-with-upnp/</guid>
      <description>This post deals with recent observations regarding UPnP (Universal Plug and Play) protocol &amp;amp; Routers. In few words, thanks to this protocol, devices (such as file sharing services, games, ..) can be easily connected/deployed.
First, I started to do research on my box to find relevant UPnP functionalities by hand, found some but I had trouble to exploit them. Few days ago, David Middlehurst released a tool called &amp;ldquo;UPnP Pentest Toolkit&amp;rdquo;.</description>
    </item>
    
    <item>
      <title>Kioptrix 3 Write-up</title>
      <link>http://paulsec.github.io/posts/kioptrix-3-write-up/</link>
      <pubDate>Thu, 12 Jun 2014 00:00:00 +0000</pubDate>
      
      <guid>http://paulsec.github.io/posts/kioptrix-3-write-up/</guid>
      <description>This has been some long time I haven&#39;t written another write-up. This one&#39;s for Kioptrix 3 that you can find here.
Host Discovery $ nmap -sP 192.168.56.1/24 and we got the IP address : 192.168.56.101.
As it was explained, you need to add 192.168.56.101 kioptrix3.com in your /etc/hosts.
Fingerprinting Then, let&#39;s find what kind of services are running on the host machine.
$ nmap 192.168.56.101 -sV -A Starting Nmap 6.46 ( http://nmap.</description>
    </item>
    
    <item>
      <title>Diving into XSS googles game</title>
      <link>http://paulsec.github.io/posts/diving-into-xss-googles-game/</link>
      <pubDate>Mon, 02 Jun 2014 00:00:00 +0000</pubDate>
      
      <guid>http://paulsec.github.io/posts/diving-into-xss-googles-game/</guid>
      <description>Hi there, this post deals with the game released by Google few days ago about XSS vulnerabilities that you can find here.
I&#39;ll enumerate some of the solution I found on the Internet which were (in my opnion) interesting/fun. This post contains the solutions for all levels. Big spoil.
Level 1: Hello, world of XSS Well, this one was obvious:
&amp;lt;script&amp;gt;alert(1);&amp;lt;/script&amp;gt; Level 2: Persistence is key For this one, you had different options:</description>
    </item>
    
    <item>
      <title>Bobby Write-up</title>
      <link>http://paulsec.github.io/posts/bobby-write-up/</link>
      <pubDate>Thu, 15 May 2014 00:00:00 +0000</pubDate>
      
      <guid>http://paulsec.github.io/posts/bobby-write-up/</guid>
      <description>Hi there,
Quick blog post on the VM &amp;ldquo;Bobby&amp;rdquo; which is once of the nicest VM I did so far.
Discovery The first step is always the same: discovering the machine on the network. To do so:
$ nmap -sV 192.168.1.1/24 I managed to retrieve the IP address: 192.168.1.11.
Let&#39;s start to fingerprint the different services to exploit it.
Fingerprinting Then, I used Nmap to retrieve the services running:
$ nmap -sV 192.</description>
    </item>
    
    <item>
      <title>HTTP Security Headers on top 10k Alexa websites</title>
      <link>http://paulsec.github.io/posts/http-security-headers-on-top-10k-alexa-websites/</link>
      <pubDate>Tue, 13 May 2014 00:00:00 +0000</pubDate>
      
      <guid>http://paulsec.github.io/posts/http-security-headers-on-top-10k-alexa-websites/</guid>
      <description>EDIT: Added statistics of max-age option.
Hi there,
This blog post deals with HTTP Security Headers on top 10k Alexa websites. Based on this discussion on netsec, I decided to do some statistics on Alexa ranking.
To do this study, I did a GET HTTP Request and saved the headers in the HTTP response. This has been done using Python.
First of all, I scanned 10000 hosts. 555 hosts didn&#39;t respond so those statistics are based on 9445 hosts.</description>
    </item>
    
    <item>
      <title>Blind HQL Injection in REST API using H2 DMBS</title>
      <link>http://paulsec.github.io/posts/blind-hql-injection-in-rest-api-using-h2-dbms/</link>
      <pubDate>Mon, 05 May 2014 00:00:00 +0000</pubDate>
      
      <guid>http://paulsec.github.io/posts/blind-hql-injection-in-rest-api-using-h2-dbms/</guid>
      <description>This post deals with some research I just did regarding (Blind) HQL injections with H2 as the DataBase Management System.
First, you should read this post which gives some really useful information regarding HQL injections in general: HQL for pentesters.
During the assessment, I checked the API calls by using Burp as a proxy and one call was:
http://application/API/Users/?req=id=1 The output was a JSON response, such as:
[{user: &amp;quot;admin&amp;quot;, id: &amp;quot;1&amp;quot;, firstName:&amp;quot;Admin&amp;quot;}] If you changed the id with the numeric value 2, and so on.</description>
    </item>
    
    <item>
      <title>BSides Slides - CSRFT</title>
      <link>http://paulsec.github.io/posts/bsides-slides-csrft/</link>
      <pubDate>Tue, 29 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>http://paulsec.github.io/posts/bsides-slides-csrft/</guid>
      <description>Hey,
Just a quick post to give you the link to my slides for BSides London today: Here Don&#39;t hesitate if you have any feedback, or any good feature.
You can reach me either on Github and Twitter
Just few words about the conference which was absolutely amazing. Some really great people were here, good atmosphere and people were really helpful.
For sure, I&#39;ll attend it next year.
Cheers,</description>
    </item>
    
    <item>
      <title>BWApp Write-Up</title>
      <link>http://paulsec.github.io/posts/bwapp-write-up/</link>
      <pubDate>Mon, 21 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>http://paulsec.github.io/posts/bwapp-write-up/</guid>
      <description>This post contains the steps to get a root shell with bWapp VM
Host discovery As always, we need to discover where the machine is on our network. To do so, let&#39;s use Nmap:
nmap -sP 192.168.1.1/24 Fingerprinting After getting the IP address (192.168.1.10), we need to do some fingerprinting.
nmap -sV 192.168.1.10 Fig. Nmap scan result
A lot of services were open, such as: VNC, FTP, etc.
As I saw it in the scan report, I decided to scan the port 80 with Nikto.</description>
    </item>
    
    <item>
      <title>Scream Write-up</title>
      <link>http://paulsec.github.io/posts/scream-write-up/</link>
      <pubDate>Wed, 16 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>http://paulsec.github.io/posts/scream-write-up/</guid>
      <description>This post contains the steps to get a root shell with Scream VM
This VM can he found here. Have a look to find even more VMs. But before starting the report, I&#39;d like to congratulate g0tmi1k for his awesome tool : VulnInjector.
Ok, let&#39;s do this write-up !
Host discovery As always, we need to discover where the machine is on our network. To do so, let&#39;s use Nmap:</description>
    </item>
    
    <item>
      <title>Exploiting KB Vulnerable Web App 1 Write-Up</title>
      <link>http://paulsec.github.io/posts/exploit-kb-vulnerable-web-app-1-write-up/</link>
      <pubDate>Tue, 15 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>http://paulsec.github.io/posts/exploit-kb-vulnerable-web-app-1-write-up/</guid>
      <description>This post contains the steps to get a root shell with Exploit KB Vulnerable Web App 1 VM
This VM can he found here. Have a look to find even more VMs
Host discovery First, we need to discover where the machine is on our network. To do so, let&#39;s use Nmap:
nmap -sP 192.168.1.1/24 Fingerprinting After getting the IP address, we need to do some fingerprinting.
nmap -sV 192.168.1.23 Fig.</description>
    </item>
    
    <item>
      <title>Kioptrix 2 Write-up</title>
      <link>http://paulsec.github.io/posts/kioptrix-2-write-up/</link>
      <pubDate>Tue, 15 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>http://paulsec.github.io/posts/kioptrix-2-write-up/</guid>
      <description>This post contains the steps to get a root shell with Kioptrix level 2 VM
This VM can he found here. Have a look to find even more VMs
Host discovery First, we need to discover where the machine is on our network. To do so, let&#39;s use Nmap:
nmap -sP 192.168.1.1/24 Fingerprinting After getting the IP address, we need to do some fingerprinting.
nmap -sV 192.168.1.42 Fig. Nmap scan result</description>
    </item>
    
    <item>
      <title>Kioptrix 1 Write-up</title>
      <link>http://paulsec.github.io/posts/kioptrix-1-write-up/</link>
      <pubDate>Mon, 14 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>http://paulsec.github.io/posts/kioptrix-1-write-up/</guid>
      <description>This post contains the steps to get a root shell with Kioptrix level 1 VM
This VM can he found here. Have a look to find even more VMs
Host discovery First, we need to discover where the machine is on our network. To do so, let&#39;s use Nmap:
nmap -sP 192.168.1.1/24 Fingerprinting After getting the IP address, we need to do some fingerprinting.
nmap -sV 192.168.1.2 Fig. Nmap scan result</description>
    </item>
    
    <item>
      <title>SecOS-1 First VM Out</title>
      <link>http://paulsec.github.io/posts/secos-1-first-vm-out/</link>
      <pubDate>Mon, 14 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>http://paulsec.github.io/posts/secos-1-first-vm-out/</guid>
      <description>Hey there,
Quick blog post for the first VM I created to experiment some of your pentesting skills.
The idea grew up when I developed some security tools (especially the one (CSRFT) I presented at BSides London few weeks ago) to create a legal environment where you could try it out.
I really liked creating this Boot2root VM. So, I&#39;ll create few more that will rely on each other so keep the flags because you&#39;ll need it for the next ones.</description>
    </item>
    
    <item>
      <title>Updating OpenFuck Exploit</title>
      <link>http://paulsec.github.io/posts/updating-openfuck-exploit/</link>
      <pubDate>Mon, 14 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>http://paulsec.github.io/posts/updating-openfuck-exploit/</guid>
      <description>This blog post will be quite fast and will provide you the steps to update the OpenFuck exploit.
This exploit is pretty old but you might need it if you have fun with some vulnerable VMs. Not giving any hint. :-)
Thanks to this blog, I&#39;ve been able to update the exploit.
Here are the steps to make this work :
 1) Add those headers :  #include &amp;lt;openssl/rc4.h&amp;gt;#include &amp;lt;openssl/md5.</description>
    </item>
    
    <item>
      <title>VulnOS Write-up</title>
      <link>http://paulsec.github.io/posts/vulnos-write-up/</link>
      <pubDate>Tue, 08 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>http://paulsec.github.io/posts/vulnos-write-up/</guid>
      <description>This contains the solution of the VM: VulnOS.
This is my first write-up for a VM and I&#39;m doing it for VulnOS which is hosted on VulnHub (Great resource if you want to improve your pentesting skills).
In this &amp;lsquo;tutorial&amp;rsquo;, I&#39;m gonna give you the steps I reproduced to get a shell on the machine.
Discovery First, start by scanning the network to discover where&#39;s the host.
nmap -sV 192.168.56.1/24 Starting Nmap 6.</description>
    </item>
    
    <item>
      <title>Python &#43; Transmission daemon = Download easily your favorite TV Show</title>
      <link>http://paulsec.github.io/posts/python-plus-transmission-daemon-equals-download-easily-your-favorite-tv-show/</link>
      <pubDate>Fri, 28 Mar 2014 00:00:00 +0000</pubDate>
      
      <guid>http://paulsec.github.io/posts/python-plus-transmission-daemon-equals-download-easily-your-favorite-tv-show/</guid>
      <description>This post is about my last project : my TV Show Manager.
I decided to start it because I wanted something really simple to download my favorite TV Shows. In this post, I&#39;ll explain step by step how to reproduce it at home.
Basically, with this tutorial you&#39;ll set up your Raspberry box by :
 Installing / set-uping transmission-daemon Getting one of my latest project TVShowManager that uses my EZTV Python API.</description>
    </item>
    
    <item>
      <title>XSS Callback</title>
      <link>http://paulsec.github.io/posts/xss-callback/</link>
      <pubDate>Thu, 20 Mar 2014 00:00:00 +0000</pubDate>
      
      <guid>http://paulsec.github.io/posts/xss-callback/</guid>
      <description>This post deals with a project I developed : XSS Callback.
This is not going to be (at least, I hope) a boring post about XSS exploitation. No.
Well, one scenario of using XSS would be to steal victim&#39;s cookie and access the page through his session. This technique is called Session Hijacking. Ok fair enough.
However, some issues are present using this technique, let&#39;s take an example :
 You target a website Unfortunately, it&#39;s too late (or too early depending on your situation) and you go to sleep.</description>
    </item>
    
    <item>
      <title>Dealing with HTML submits conflicts</title>
      <link>http://paulsec.github.io/posts/dealing-with-html-submits-conflict/</link>
      <pubDate>Sun, 09 Mar 2014 00:00:00 +0000</pubDate>
      
      <guid>http://paulsec.github.io/posts/dealing-with-html-submits-conflict/</guid>
      <description>This first post is related with one of my project : CSRFT. CSRFT is a Cross Site Request Forgery (CSRF) vulnerabilities Toolkit.
My toolkit allows you to exploit either GET and POST HTTP Requests. During some testings, I had issues with some specific forms.
Let&#39;s take an example of such form :
&amp;lt;form action=&amp;#34;http://website.com/blog/&amp;#34; id=&amp;#34;form&amp;#34; method=&amp;#34;get&amp;#34;&amp;gt; &amp;lt;label class=&amp;#34;assistive-text&amp;#34; for=&amp;#34;s&amp;#34;&amp;gt;Search&amp;lt;/label&amp;gt; &amp;lt;input class=&amp;#34;field&amp;#34; id=&amp;#34;s&amp;#34; name=&amp;#34;s&amp;#34; placeholder=&amp;#34;Search&amp;#34; type=&amp;#34;text&amp;#34; value=&amp;#34;Search Value&amp;#34;/&amp;gt; &amp;lt;input class=&amp;#34;submit&amp;#34; id=&amp;#34;searchsubmit&amp;#34; name=&amp;#34;submit&amp;#34; type=&amp;#34;submit&amp;#34; value=&amp;#34;Search&amp;#34;/&amp;gt; &amp;lt;/form&amp;gt; The code injected on the page to submit the form was like that :</description>
    </item>
    
    <item>
      <title>Starting my own blog</title>
      <link>http://paulsec.github.io/posts/starting-my-own-blog/</link>
      <pubDate>Tue, 04 Mar 2014 00:00:00 +0000</pubDate>
      
      <guid>http://paulsec.github.io/posts/starting-my-own-blog/</guid>
      <description>Starting my own blog has been something I really wanted to do. I&#39;ll add post related to my different projects but also on Web security.
Here are my different motivations :
1. Provide a portfolio of my different projects. 2. Explain some problems I had and provide the solution 3. Talk about some geek stuffs. Let&#39;s see :) Hope you&#39;ll have fun to read me. Cheers and see you soon.</description>
    </item>
    
  </channel>
</rss>